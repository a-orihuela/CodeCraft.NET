// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.Contracts.Persistence;
using CodeCraft.NET.Application.Contracts.Persistence.Base;
using CodeCraft.NET.Application.Contracts.Persistence.Repositories;
using CodeCraft.NET.Cross.Domain;
using CodeCraft.NET.Infrastructure.Persistence.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System.Collections;


namespace CodeCraft.NET.Infrastructure.Persistence;

public partial class CodeCraftUnitOfWork : ICodeCraftUnitOfWork
{
    private Hashtable _repositories;
    private readonly ApplicationDbContext _context;
    private readonly IServiceProvider _serviceProvider;

    public CodeCraftUnitOfWork(ApplicationDbContext context, IServiceProvider serviceProvider)
    {
        _context = context;
        _serviceProvider = serviceProvider;
    }

    private ILogConfigurationRepository _LogConfigurationRepository { get; set; }
    public ILogConfigurationRepository LogConfigurationRepository => _LogConfigurationRepository ??= new LogConfigurationRepository(_context);
    private ILogEntryRepository _LogEntryRepository { get; set; }
    public ILogEntryRepository LogEntryRepository => _LogEntryRepository ??= new LogEntryRepository(_context);
    private ILogSummaryRepository _LogSummaryRepository { get; set; }
    public ILogSummaryRepository LogSummaryRepository => _LogSummaryRepository ??= new LogSummaryRepository(_context);

	public async Task<int> Complete()
    {
        try
        {
            return await _context.SaveChangesAsync();
        }
		catch (DbUpdateException ex)
		{
			throw new Exception("Error saving changes to the database", ex);
		}
		catch (Exception ex)
        {
			throw new Exception("Unexpected error when running UnitOfWork", ex);
		}
	}

    public void Dispose()
    {
        _context.Dispose();
    }

    public IAsyncRepository<TEntity> Repository<TEntity>() where TEntity : BaseDomainModel
    {
        return _serviceProvider.GetRequiredService<IAsyncRepository<TEntity>>();
    }
}
