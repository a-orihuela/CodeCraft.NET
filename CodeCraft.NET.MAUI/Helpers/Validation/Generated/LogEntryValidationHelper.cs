// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using System.ComponentModel.DataAnnotations;
using CodeCraft.NET.Application.DTOs.LogEntries;
using CodeCraft.NET.MAUI.Validation.Generated;

namespace CodeCraft.NET.MAUI.Helpers.Validation.Generated
{
    /// <summary>
    /// Validation helper for LogEntry entity
    /// Provides UI-friendly validation
    /// </summary>
    public static class LogEntryValidationHelper
    {
        /// <summary>
        /// Validate LogEntry for creation
        /// </summary>
        public static MauiValidationResult ValidateForCreate(object model)
        {
            var validationResults = new List<ValidationResult>();
            var context = new ValidationContext(model);
            
            var isValid = Validator.TryValidateObject(model, context, validationResults, true);
            
            return new MauiValidationResult
            {
                IsValid = isValid,
                ErrorMessages = validationResults.Select(vr => vr.ErrorMessage ?? "Unknown error").ToList()
            };
        }

        /// <summary>
        /// Validate LogEntry for update
        /// </summary>
        public static MauiValidationResult ValidateForUpdate(object model)
        {
            var validationResults = new List<ValidationResult>();
            var context = new ValidationContext(model);
            
            var isValid = Validator.TryValidateObject(model, context, validationResults, true);
            
            return new MauiValidationResult
            {
                IsValid = isValid,
                ErrorMessages = validationResults.Select(vr => vr.ErrorMessage ?? "Unknown error").ToList()
            };
        }

        /// <summary>
        /// Validate specific property
        /// </summary>
        public static MauiValidationResult ValidateProperty(object model, string propertyName, object? value)
        {
            var validationResults = new List<ValidationResult>();
            var context = new ValidationContext(model) { MemberName = propertyName };
            
            var isValid = Validator.TryValidateProperty(value, context, validationResults);
            
            return new MauiValidationResult
            {
                IsValid = isValid,
                ErrorMessages = validationResults.Select(vr => vr.ErrorMessage ?? "Unknown error").ToList()
            };
        }

        /// <summary>
        /// Get user-friendly field name for display
        /// </summary>
        public static string GetDisplayName(string propertyName)
        {
            // TODO: Add property display name mappings for LogEntry
            return propertyName;
        }

        /// <summary>
        /// Check if field is required
        /// </summary>
        public static bool IsRequired(string propertyName)
        {
            // TODO: Add required field logic for LogEntry
            return false;
        }

        /// <summary>
        /// Get validation hint for UI
        /// </summary>
        public static string GetValidationHint(string propertyName)
        {
            // TODO: Add validation hints for LogEntry properties
            return $"Enter {propertyName.ToLowerInvariant()}";
        }

        /// <summary>
        /// Get maximum length for string fields
        /// </summary>
        public static int? GetMaxLength(string propertyName)
        {
            // TODO: Add max length logic for LogEntry string properties
            return null;
        }
    }
}