// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using System.Collections.ObjectModel;
using System.ComponentModel;
using CommunityToolkit.Mvvm.ComponentModel;
using Microsoft.Extensions.Logging;
using CodeCraft.NET.Application.DTOs.LogConfigurations;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Update;
using CodeCraft.NET.Services.Services;
using CodeCraft.NET.MAUI.Services.Generated;

namespace CodeCraft.NET.MAUI.Helpers.Services.Generated
{
    /// <summary>
    /// Service helper for LogConfiguration operations optimized for MAUI UI
    /// Provides loading states, error handling, and UI-friendly methods
    /// </summary>
    public partial class LogConfigurationServiceHelper
    {
        private readonly LogConfigurationService _service;
        private readonly ILogger<LogConfigurationServiceHelper> _logger;

        public LogConfigurationServiceHelper(LogConfigurationService service, ILogger<LogConfigurationServiceHelper> logger)
        {
            _service = service;
            _logger = logger;
        }

        /// <summary>
        /// Load all LogConfigurations with UI loading states
        /// </summary>
        public async Task<MauiServiceResult<ObservableCollection<LogConfigurationDto>>> LoadAllForUIAsync(
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Loading all LogConfigurations for UI");
                
                // Set loading state if ViewModel supports it
                SetLoadingState(viewModel, true);
                
                var result = await _service.GetAllAsync();
                
                if (result.IsSuccess)
                {
                    var collection = new ObservableCollection<LogConfigurationDto>(result.Data);
                    _logger.LogInformation("Successfully loaded {Count} LogConfigurations", collection.Count);
                    return MauiServiceResult<ObservableCollection<LogConfigurationDto>>.Success(collection);
                }
                else
                {
                    _logger.LogWarning("Failed to load LogConfigurations: {Error}", result.ErrorMessage);
                    return MauiServiceResult<ObservableCollection<LogConfigurationDto>>.Failure(
                        result.ErrorMessage, 
                        "Failed to load LogConfigurations. Please check your connection and try again.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while loading LogConfigurations for UI");
                return MauiServiceResult<ObservableCollection<LogConfigurationDto>>.Failure(
                    ex.Message,
                    "An unexpected error occurred while loading LogConfigurations.");
            }
            finally
            {
                SetLoadingState(viewModel, false);
            }
        }

        /// <summary>
        /// Create LogConfiguration with UI validation and feedback
        /// </summary>
        public async Task<MauiServiceResult<int>> CreateWithUIFeedbackAsync(
            LogConfigurationCreate command,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Creating LogConfiguration via UI");
                
                SetSavingState(viewModel, true);
                
                var result = await _service.CreateAsync(command);
                
                if (result.IsSuccess)
                {
                    _logger.LogInformation("Successfully created LogConfiguration with ID: {Id}", result.Data);
                    return MauiServiceResult<int>.Success(
                        result.Data,
                        "LogConfiguration created successfully!");
                }
                else
                {
                    _logger.LogWarning("Failed to create LogConfiguration: {Error}", result.ErrorMessage);
                    return MauiServiceResult<int>.Failure(
                        result.ErrorMessage,
                        "Failed to create LogConfiguration. Please check your input and try again.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while creating LogConfiguration via UI");
                return MauiServiceResult<int>.Failure(
                    ex.Message,
                    "An unexpected error occurred while creating the LogConfiguration.");
            }
            finally
            {
                SetSavingState(viewModel, false);
            }
        }

        /// <summary>
        /// Update LogConfiguration with optimistic UI updates
        /// </summary>
        public async Task<MauiServiceResult<bool>> UpdateWithUIFeedbackAsync(
            LogConfigurationUpdate command,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Updating LogConfiguration {Id} via UI", command.Id);
                
                SetSavingState(viewModel, true);
                
                var result = await _service.UpdateAsync(command);
                
                if (result.IsSuccess)
                {
                    _logger.LogInformation("Successfully updated LogConfiguration {Id}", command.Id);
                    return MauiServiceResult<bool>.Success(
                        true,
                        "LogConfiguration updated successfully!");
                }
                else
                {
                    _logger.LogWarning("Failed to update LogConfiguration {Id}: {Error}", command.Id, result.ErrorMessage);
                    return MauiServiceResult<bool>.Failure(
                        result.ErrorMessage,
                        "Failed to update LogConfiguration. Please check your input and try again.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while updating LogConfiguration {Id} via UI", command.Id);
                return MauiServiceResult<bool>.Failure(
                    ex.Message,
                    "An unexpected error occurred while updating the LogConfiguration.");
            }
            finally
            {
                SetSavingState(viewModel, false);
            }
        }

        /// <summary>
        /// Delete LogConfiguration with confirmation handling
        /// </summary>
        public async Task<MauiServiceResult<bool>> DeleteWithConfirmationAsync(
            int id,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Deleting LogConfiguration {Id} via UI", id);
                
                SetLoadingState(viewModel, true);
                
                var result = await _service.DeleteAsync(id);
                
                if (result.IsSuccess)
                {
                    _logger.LogInformation("Successfully deleted LogConfiguration {Id}", id);
                    return MauiServiceResult<bool>.Success(
                        true,
                        "LogConfiguration deleted successfully!");
                }
                else
                {
                    _logger.LogWarning("Failed to delete LogConfiguration {Id}: {Error}", id, result.ErrorMessage);
                    return MauiServiceResult<bool>.Failure(
                        result.ErrorMessage,
                        "Failed to delete LogConfiguration. It may have been already removed.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while deleting LogConfiguration {Id} via UI", id);
                return MauiServiceResult<bool>.Failure(
                    ex.Message,
                    "An unexpected error occurred while deleting the LogConfiguration.");
            }
            finally
            {
                SetLoadingState(viewModel, false);
            }
        }

        /// <summary>
        /// Get LogConfiguration by ID with UI error handling
        /// </summary>
        public async Task<MauiServiceResult<LogConfigurationDto>> GetByIdForUIAsync(
            int id,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Loading LogConfiguration {Id} for UI", id);
                
                SetLoadingState(viewModel, true);
                
                var result = await _service.GetByIdAsync(id);
                
                if (result.IsSuccess && result.Data != null)
                {
                    _logger.LogInformation("Successfully loaded LogConfiguration {Id}", id);
                    return MauiServiceResult<LogConfigurationDto>.Success(result.Data);
                }
                else
                {
                    _logger.LogWarning("LogConfiguration {Id} not found", id);
                    return MauiServiceResult<LogConfigurationDto>.Failure(
                        "Entity not found",
                        "The requested LogConfiguration could not be found.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while loading LogConfiguration {Id} for UI", id);
                return MauiServiceResult<LogConfigurationDto>.Failure(
                    ex.Message,
                    "An unexpected error occurred while loading the LogConfiguration.");
            }
            finally
            {
                SetLoadingState(viewModel, false);
            }
        }

        #region Private Helper Methods

        private void SetLoadingState(INotifyPropertyChanged viewModel, bool isLoading)
        {
            if (viewModel is ObservableObject observable)
            {
                // Try to set IsLoading property if it exists
                var isLoadingProperty = observable.GetType().GetProperty("IsLoading");
                isLoadingProperty?.SetValue(observable, isLoading);
            }
        }

        private void SetSavingState(INotifyPropertyChanged viewModel, bool isSaving)
        {
            if (viewModel is ObservableObject observable)
            {
                // Try to set IsSaving property if it exists
                var isSavingProperty = observable.GetType().GetProperty("IsSaving");
                isSavingProperty?.SetValue(observable, isSaving);
            }
        }

        #endregion
    }
}