// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.Contracts.Persistence.Repositories;
using CodeCraft.NET.Domain.Model;
using CodeCraft.NET.Infrastructure.Persistence;
using CodeCraft.NET.Infrastructure.Persistence.Repositories;
using DomainLogLevel = CodeCraft.NET.Domain.Model.LogLevel;
using DomainSystemComponent = CodeCraft.NET.Domain.Model.SystemComponent;
using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;


namespace CodeCraft.NET.Test.Infrastructure.Repositories
{
    [TestClass]
    public class LogEntryRepositoryTests
    {
        private ApplicationDbContext _context = null!;
        private ILogEntryRepository _repository = null!;

        [TestInitialize]
        public void Setup()
        {
            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            _context = new ApplicationDbContext(options);
            _repository = new LogEntryRepository(_context);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _context.Dispose();
        }

        #region GetByIdAsync Tests

        [TestMethod]
        public async Task GetByIdAsync_ExistingEntity_ReturnsEntity()
        {
            // Arrange
            var entity = CreateLogEntryEntity();

            _context.LogEntries.Add(entity);
            await _context.SaveChangesAsync();

            // Act
            var result = await _repository.GetByIdAsync(entity.Id);

            // Assert
            result.Should().NotBeNull();
            result!.Id.Should().Be(entity.Id);
        }

        [TestMethod]
        public async Task GetByIdAsync_NonExistentEntity_ReturnsNull()
        {
            // Arrange
            var nonExistentId = 999;

            // Act
            var result = await _repository.GetByIdAsync(nonExistentId);

            // Assert
            result.Should().BeNull();
        }

        #endregion

        #region GetAllAsync Tests

        [TestMethod]
        public async Task GetAllAsync_EmptyDatabase_ReturnsEmptyList()
        {
            // Act
            var result = await _repository.GetAllAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().BeEmpty();
        }

        [TestMethod]
        public async Task GetAllAsync_WithEntities_ReturnsAllEntities()
        {
            // Arrange
            var entities = new List<LogEntry>
            {
                CreateLogEntryEntity(),
                CreateLogEntryEntity()
            };

            _context.LogEntries.AddRange(entities);
            await _context.SaveChangesAsync();

            // Act
            var result = await _repository.GetAllAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(2);
        }

        #endregion

        #region AddAsync Tests

        [TestMethod]
        public async Task AddAsync_ValidEntity_AddsEntityToDatabase()
        {
            // Arrange
            var entity = CreateLogEntryEntity();

            // Act
            var result = await _repository.AddAsync(entity);
            await _context.SaveChangesAsync();

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().BeGreaterThan(0);

            var savedEntity = await _context.LogEntries.FindAsync(result.Id);
            savedEntity.Should().NotBeNull();
        }

        #endregion

        #region UpdateAsync Tests

        [TestMethod]
        public async Task UpdateAsync_ExistingEntity_UpdatesEntity()
        {
            // Arrange
            var entity = CreateLogEntryEntity();

            _context.LogEntries.Add(entity);
            await _context.SaveChangesAsync();

            // TODO: Modify entity properties for testing

            // Act
            await _repository.UpdateAsync(entity);
            await _context.SaveChangesAsync();

            // Assert
            var updatedEntity = await _context.LogEntries.FindAsync(entity.Id);
            updatedEntity.Should().NotBeNull();
        }

        #endregion

        #region DeleteAsync Tests

        [TestMethod]
        public async Task DeleteAsync_ExistingEntity_RemovesEntity()
        {
            // Arrange
            var entity = CreateLogEntryEntity();

            _context.LogEntries.Add(entity);
            await _context.SaveChangesAsync();

            // Act
            await _repository.DeleteAsync(entity);
            await _context.SaveChangesAsync();

            // Assert
            var deletedEntity = await _context.LogEntries.FindAsync(entity.Id);
            deletedEntity.Should().BeNull();
        }

        #endregion

        #region Helper Methods

        private LogEntry CreateLogEntryEntity()
        {
            return new LogEntry
            {
                // TODO: Set required properties for LogEntry
                // Timestamp = // TODO: Set DateTime value
                // Level = // TODO: Set LogLevel value
                // Message = // TODO: Set string value
                // Category = // TODO: Set string value
                // Component = // TODO: Set string value
                // ComponentCategory = // TODO: Set SystemComponent value
                // Exception = // TODO: Set string value
                // StackTrace = // TODO: Set string value
                // AdditionalData = // TODO: Set string value
                // CorrelationId = // TODO: Set string value
                // SessionId = // TODO: Set string value
                // UserId = // TODO: Set string value
                // MethodName = // TODO: Set string value
                // ClassName = // TODO: Set string value
                // LineNumber = // TODO: Set int? value
                // FileName = // TODO: Set string value
                // ClientIP = // TODO: Set string value
                // UserAgent = // TODO: Set string value
                // RequestUrl = // TODO: Set string value
                // HttpMethod = // TODO: Set string value
                // DurationMs = // TODO: Set long? value
                // StatusCode = // TODO: Set int? value
                // IsProcessed = // TODO: Set bool value
                // AdminNotes = // TODO: Set string value
                // MessageHash = // TODO: Set string value
                // OccurrenceCount = // TODO: Set int value
                // LastOccurrence = // TODO: Set DateTime? value
                // Active = // TODO: Set bool value
                // CreatedOn = // TODO: Set DateTime value
                // CreatedBy = // TODO: Set string value
                // ModifiedOn = // TODO: Set DateTime? value
                // ModifiedBy = // TODO: Set string value
            };
        }

        #endregion
    }
}