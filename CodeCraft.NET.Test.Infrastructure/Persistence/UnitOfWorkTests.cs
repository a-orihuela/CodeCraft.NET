// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using CodeCraft.NET.Infrastructure.Persistence;
using CodeCraft.NET.Application.Contracts.Persistence;
using CodeCraft.NET.Application.Contracts.Persistence.Base;
using Microsoft.Extensions.DependencyInjection;
using CodeCraft.NET.Domain.Model;
using CodeCraft.NET.Domain.Model;
using CodeCraft.NET.Domain.Model;

namespace CodeCraft.NET.Test.Infrastructure.Persistence
{
    [TestClass]
    public class UnitOfWorkTests
    {
        private ApplicationDbContext _context = null!;
        private ICodeCraftUnitOfWork _unitOfWork = null!;
        private IServiceProvider _serviceProvider = null!;

        [TestInitialize]
        public void Setup()
        {
            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            _context = new ApplicationDbContext(options);
            
            // Setup minimal service provider for tests
            var services = new ServiceCollection();
            services.AddScoped(typeof(IAsyncRepository<>), typeof(AsyncRepositoryAdapter<>));
            _serviceProvider = services.BuildServiceProvider();
            
            _unitOfWork = new CodeCraftUnitOfWork(_context, _serviceProvider);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _unitOfWork.Dispose();
            _context.Dispose();
            if (_serviceProvider is IDisposable disposableProvider)
                disposableProvider.Dispose();
        }

        #region Repository Property Tests

        [TestMethod]
        public void LogConfigurationRepository_ShouldNotBeNull()
        {
            // Act & Assert
            _unitOfWork.LogConfigurationRepository.Should().NotBeNull();
        }

        [TestMethod]
        public void LogEntryRepository_ShouldNotBeNull()
        {
            // Act & Assert
            _unitOfWork.LogEntryRepository.Should().NotBeNull();
        }

        [TestMethod]
        public void LogSummaryRepository_ShouldNotBeNull()
        {
            // Act & Assert
            _unitOfWork.LogSummaryRepository.Should().NotBeNull();
        }

        #endregion

        #region Transaction Tests

        [TestMethod]
        public async Task Complete_WithoutChanges_ReturnsZero()
        {
            // Act
            var result = await _unitOfWork.Complete();

            // Assert
            result.Should().Be(0);
        }

        #endregion

        #region Disposal Tests

        [TestMethod]
        public void Dispose_CalledMultipleTimes_ShouldNotThrow()
        {
            // Act & Assert
            _unitOfWork.Dispose();
            Action secondDispose = () => _unitOfWork.Dispose();
            
            secondDispose.Should().NotThrow();
        }

        #endregion
    }
}