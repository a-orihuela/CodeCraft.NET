// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Delete;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Queries.GetLogEntryById;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Queries.GetLogEntryWithRelated;
using CodeCraft.NET.Application.DTOs.Custom.LogEntries;
using CodeCraft.NET.Application.DTOs.LogEntries;
using CodeCraft.NET.Services.Models;
using CodeCraft.NET.Services.Services;
using FluentAssertions;
using MediatR;
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;


namespace CodeCraft.NET.Test.Services.Services
{
    [TestClass]
    public class LogEntryServiceTests
    {
        private Mock<IMediator> _mediatorMock = null!;
        private Mock<ILogger<LogEntryService>> _loggerMock = null!;
        private LogEntryService _service = null!;

        [TestInitialize]
        public void Setup()
        {
            _mediatorMock = new Mock<IMediator>();
            _loggerMock = new Mock<ILogger<LogEntryService>>();
            _service = new LogEntryService(_mediatorMock.Object, _loggerMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _mediatorMock.Reset();
            _loggerMock.Reset();
        }

        #region CreateAsync Tests

        [TestMethod]
        public async Task CreateAsync_ValidCommand_ReturnsSuccessResult()
        {
            // Arrange
            var command = CreateValidLogEntryCreateCommand();
            var expectedId = 123;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedId);

            // Act
            var result = await _service.CreateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().Be(expectedId);
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task CreateAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var command = CreateValidLogEntryCreateCommand();
            var exception = new Exception("Database connection failed");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.CreateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().Be(0);
            result.ErrorMessage.Should().Contain("Failed to create LogEntry");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region UpdateAsync Tests

        [TestMethod]
        public async Task UpdateAsync_ValidCommand_ReturnsSuccessResult()
        {
            // Arrange
            var command = CreateValidLogEntryUpdateCommand();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(true);

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().BeTrue();
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task UpdateAsync_MediatorReturnsFalse_ReturnsSuccessResult()
        {
            // Arrange
            var command = CreateValidLogEntryUpdateCommand();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(false);

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue(); // BaseEntityService always returns Success if no exception
            result.Data.Should().BeFalse(); // But Data contains the actual boolean result

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task UpdateAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var command = CreateValidLogEntryUpdateCommand();
            var exception = new Exception("Validation failed");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeFalse();
            result.ErrorMessage.Should().Contain("Failed to update LogEntry");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region DeleteAsync Tests

        [TestMethod]
        public async Task DeleteAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 123;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(true);

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().BeTrue();
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task DeleteAsync_InvalidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(false);

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue(); // BaseEntityService returns Success even when delete returns false
            result.Data.Should().BeFalse(); // But Data contains the actual boolean result

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task DeleteAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var id = 123;
            var exception = new Exception("Entity not found");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeFalse();
            result.ErrorMessage.Should().Contain("Failed to delete LogEntry");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region GetByIdAsync Tests

        [TestMethod]
        public async Task GetByIdAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 123;
            var expectedDto = CreateValidLogEntryDto();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedDto);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().NotBeNull();
            result.Data.Should().BeEquivalentTo(expectedDto);
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task GetByIdAsync_EntityNotFound_ReturnsFailureResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(null);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("LogEntry with ID 999 not found");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task GetByIdAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var id = 123;
            var exception = new Exception("Database error");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("Failed to get LogEntry");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region GetWithRelatedAsync Tests

        [TestMethod]
        public async Task GetWithRelatedAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 123;
            var expectedDto = CreateValidLogEntryWithRelatedDto();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedDto);

            // Act
            var result = await _service.GetWithRelatedAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().NotBeNull();
            result.Data.Should().BeEquivalentTo(expectedDto);
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task GetWithRelatedAsync_EntityNotFound_ReturnsFailureResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(null);

            // Act
            var result = await _service.GetWithRelatedAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("LogEntry with ID 999 not found");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region GetAllAsync Tests

        [TestMethod]
        public async Task GetAllAsync_ReturnsEmptyListByDefault()
        {
            // Arrange - BaseEntityService GetAllAsync always returns empty list as placeholder implementation

            // Act
            var result = await _service.GetAllAsync();

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().NotBeNull();
            result.Data.Should().BeEmpty(); // BaseEntityService always returns empty list
            result.ErrorMessage.Should().BeNullOrEmpty();

            // GetAllAsync doesn't call mediator in the base implementation, so no verification needed
        }

        #endregion

        #region Helper Methods

        private LogEntryCreate CreateValidLogEntryCreateCommand()
        {
            return new LogEntryCreate
            {
                Timestamp = DateTime.UtcNow,
                Message = "TestMessage",
                Category = "TestCategory",
                Component = "TestComponent",
                Exception = "TestException",
                StackTrace = "TestStackTrace",
                AdditionalData = "TestAdditionalData",
                CorrelationId = "TestCorrelationId",
                SessionId = "TestSessionId",
                UserId = "TestUserId",
                MethodName = "TestMethodName",
                ClassName = "TestClassName",
                FileName = "TestFileName",
                ClientIP = "TestClientIP",
                UserAgent = "TestUserAgent",
                RequestUrl = "TestRequestUrl",
                HttpMethod = "TestHttpMethod",
                IsProcessed = true,
                AdminNotes = "TestAdminNotes",
                MessageHash = "TestMessageHash",
                OccurrenceCount = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };
        }

        private LogEntryUpdate CreateValidLogEntryUpdateCommand()
        {
            return new LogEntryUpdate
            {
                Id = 1,
                Timestamp = DateTime.UtcNow,
                Message = "TestMessage",
                Category = "TestCategory",
                Component = "TestComponent",
                Exception = "TestException",
                StackTrace = "TestStackTrace",
                AdditionalData = "TestAdditionalData",
                CorrelationId = "TestCorrelationId",
                SessionId = "TestSessionId",
                UserId = "TestUserId",
                MethodName = "TestMethodName",
                ClassName = "TestClassName",
                FileName = "TestFileName",
                ClientIP = "TestClientIP",
                UserAgent = "TestUserAgent",
                RequestUrl = "TestRequestUrl",
                HttpMethod = "TestHttpMethod",
                IsProcessed = true,
                AdminNotes = "TestAdminNotes",
                MessageHash = "TestMessageHash",
                OccurrenceCount = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };
        }

        private LogEntryDto CreateValidLogEntryDto()
        {
            return new LogEntryDto
            {
                Id = 1,
                Timestamp = DateTime.UtcNow,
                Message = "TestMessage",
                Category = "TestCategory",
                Component = "TestComponent",
                Exception = "TestException",
                StackTrace = "TestStackTrace",
                AdditionalData = "TestAdditionalData",
                CorrelationId = "TestCorrelationId",
                SessionId = "TestSessionId",
                UserId = "TestUserId",
                MethodName = "TestMethodName",
                ClassName = "TestClassName",
                FileName = "TestFileName",
                ClientIP = "TestClientIP",
                UserAgent = "TestUserAgent",
                RequestUrl = "TestRequestUrl",
                HttpMethod = "TestHttpMethod",
                IsProcessed = true,
                AdminNotes = "TestAdminNotes",
                MessageHash = "TestMessageHash",
                OccurrenceCount = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };
        }

        private LogEntryWithRelatedDto CreateValidLogEntryWithRelatedDto()
        {
            return new LogEntryWithRelatedDto
            {
                Id = 1,
                Timestamp = DateTime.UtcNow,
                Message = "TestMessage",
                Category = "TestCategory",
                Component = "TestComponent",
                Exception = "TestException",
                StackTrace = "TestStackTrace",
                AdditionalData = "TestAdditionalData",
                CorrelationId = "TestCorrelationId",
                SessionId = "TestSessionId",
                UserId = "TestUserId",
                MethodName = "TestMethodName",
                ClassName = "TestClassName",
                FileName = "TestFileName",
                ClientIP = "TestClientIP",
                UserAgent = "TestUserAgent",
                RequestUrl = "TestRequestUrl",
                HttpMethod = "TestHttpMethod",
                IsProcessed = true,
                AdminNotes = "TestAdminNotes",
                MessageHash = "TestMessageHash",
                OccurrenceCount = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
                // TODO: Add related entity properties if any
            };
        }

        #endregion
    }
}