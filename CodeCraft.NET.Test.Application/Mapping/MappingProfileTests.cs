// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using AutoMapper;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.LogSummaries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogSummaries.Commands.Update;
using CodeCraft.NET.Application.DTOs.Custom.LogConfigurations;
using CodeCraft.NET.Application.DTOs.Custom.LogEntries;
using CodeCraft.NET.Application.DTOs.Custom.LogSummaries;
using CodeCraft.NET.Application.DTOs.LogConfigurations;
using CodeCraft.NET.Application.DTOs.LogEntries;
using CodeCraft.NET.Application.DTOs.LogSummaries;
using CodeCraft.NET.Application.Mapping;
using CodeCraft.NET.Domain.Model;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;


namespace CodeCraft.NET.Test.Application.Mapping
{
    [TestClass]
    public class MappingProfileTests
    {
        private Mock<IMapper> _mapperMock = null!;

        [TestInitialize]
        public void Setup()
        {
            _mapperMock = new Mock<IMapper>();
        }

        [TestCleanup]
        public void Cleanup()
        {
            _mapperMock.Reset();
        }

        /// <summary>
        /// This test validates that MappingProfile can be instantiated without errors
        /// For AutoMapper 15.0.1, we skip complex configuration validation due to API changes
        /// </summary>
        [TestMethod]
        public void MappingProfile_CanBeInstantiated_WithoutErrors()
        {
            // Act & Assert
            var profile = new MappingProfile();
            profile.Should().NotBeNull();
        }

        #region LogConfiguration Mapping Tests

        [TestMethod]
        public void Map_LogConfigurationToLogConfigurationDto_ShouldCallMapper()
        {
            // Arrange
            var entity = new LogConfiguration
            {
                Id = 1
                // TODO: Set test properties based on LogConfiguration entity
            };

            var expectedDto = new LogConfigurationDto
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogConfigurationDto>(entity))
                .Returns(expectedDto);

            // Act
            var result = _mapperMock.Object.Map<LogConfigurationDto>(entity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(entity.Id);
            _mapperMock.Verify(x => x.Map<LogConfigurationDto>(entity), Times.Once);
        }

        [TestMethod]
        public void Map_LogConfigurationToLogConfigurationWithRelatedDto_ShouldCallMapper()
        {
            // Arrange
            var entity = new LogConfiguration
            {
                Id = 1
                // TODO: Set test properties based on LogConfiguration entity
            };

            var expectedDto = new LogConfigurationWithRelatedDto
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogConfigurationWithRelatedDto>(entity))
                .Returns(expectedDto);

            // Act
            var result = _mapperMock.Object.Map<LogConfigurationWithRelatedDto>(entity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(entity.Id);
            _mapperMock.Verify(x => x.Map<LogConfigurationWithRelatedDto>(entity), Times.Once);
        }

        [TestMethod]
        public void Map_LogConfigurationCreateToLogConfiguration_ShouldCallMapper()
        {
            // Arrange
            var command = new LogConfigurationCreate
            {
                // TODO: Set test properties based on LogConfigurationCreate command
            };

            var expectedEntity = new LogConfiguration
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogConfiguration>(command))
                .Returns(expectedEntity);

            // Act
            var result = _mapperMock.Object.Map<LogConfiguration>(command);

            // Assert
            result.Should().NotBeNull();
            _mapperMock.Verify(x => x.Map<LogConfiguration>(command), Times.Once);
        }

        [TestMethod]
        public void Map_LogConfigurationUpdateToLogConfiguration_ShouldCallMapper()
        {
            // Arrange
            var existingEntity = new LogConfiguration
            {
                Id = 1
                // TODO: Set existing properties
            };

            var command = new LogConfigurationUpdate
            {
                Id = 1
                // TODO: Set updated properties
            };

            var expectedEntity = new LogConfiguration
            {
                Id = 1
                // TODO: Set expected properties after update
            };

            _mapperMock.Setup(x => x.Map(command, existingEntity))
                .Returns(expectedEntity);

            // Act
            var result = _mapperMock.Object.Map(command, existingEntity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(1);
            _mapperMock.Verify(x => x.Map(command, existingEntity), Times.Once);
        }

        #endregion

        #region LogEntry Mapping Tests

        [TestMethod]
        public void Map_LogEntryToLogEntryDto_ShouldCallMapper()
        {
            // Arrange
            var entity = new LogEntry
            {
                Id = 1
                // TODO: Set test properties based on LogEntry entity
            };

            var expectedDto = new LogEntryDto
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogEntryDto>(entity))
                .Returns(expectedDto);

            // Act
            var result = _mapperMock.Object.Map<LogEntryDto>(entity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(entity.Id);
            _mapperMock.Verify(x => x.Map<LogEntryDto>(entity), Times.Once);
        }

        [TestMethod]
        public void Map_LogEntryToLogEntryWithRelatedDto_ShouldCallMapper()
        {
            // Arrange
            var entity = new LogEntry
            {
                Id = 1
                // TODO: Set test properties based on LogEntry entity
            };

            var expectedDto = new LogEntryWithRelatedDto
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogEntryWithRelatedDto>(entity))
                .Returns(expectedDto);

            // Act
            var result = _mapperMock.Object.Map<LogEntryWithRelatedDto>(entity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(entity.Id);
            _mapperMock.Verify(x => x.Map<LogEntryWithRelatedDto>(entity), Times.Once);
        }

        [TestMethod]
        public void Map_LogEntryCreateToLogEntry_ShouldCallMapper()
        {
            // Arrange
            var command = new LogEntryCreate
            {
                // TODO: Set test properties based on LogEntryCreate command
            };

            var expectedEntity = new LogEntry
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogEntry>(command))
                .Returns(expectedEntity);

            // Act
            var result = _mapperMock.Object.Map<LogEntry>(command);

            // Assert
            result.Should().NotBeNull();
            _mapperMock.Verify(x => x.Map<LogEntry>(command), Times.Once);
        }

        [TestMethod]
        public void Map_LogEntryUpdateToLogEntry_ShouldCallMapper()
        {
            // Arrange
            var existingEntity = new LogEntry
            {
                Id = 1
                // TODO: Set existing properties
            };

            var command = new LogEntryUpdate
            {
                Id = 1
                // TODO: Set updated properties
            };

            var expectedEntity = new LogEntry
            {
                Id = 1
                // TODO: Set expected properties after update
            };

            _mapperMock.Setup(x => x.Map(command, existingEntity))
                .Returns(expectedEntity);

            // Act
            var result = _mapperMock.Object.Map(command, existingEntity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(1);
            _mapperMock.Verify(x => x.Map(command, existingEntity), Times.Once);
        }

        #endregion

        #region LogSummary Mapping Tests

        [TestMethod]
        public void Map_LogSummaryToLogSummaryDto_ShouldCallMapper()
        {
            // Arrange
            var entity = new LogSummary
            {
                Id = 1
                // TODO: Set test properties based on LogSummary entity
            };

            var expectedDto = new LogSummaryDto
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogSummaryDto>(entity))
                .Returns(expectedDto);

            // Act
            var result = _mapperMock.Object.Map<LogSummaryDto>(entity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(entity.Id);
            _mapperMock.Verify(x => x.Map<LogSummaryDto>(entity), Times.Once);
        }

        [TestMethod]
        public void Map_LogSummaryToLogSummaryWithRelatedDto_ShouldCallMapper()
        {
            // Arrange
            var entity = new LogSummary
            {
                Id = 1
                // TODO: Set test properties based on LogSummary entity
            };

            var expectedDto = new LogSummaryWithRelatedDto
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogSummaryWithRelatedDto>(entity))
                .Returns(expectedDto);

            // Act
            var result = _mapperMock.Object.Map<LogSummaryWithRelatedDto>(entity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(entity.Id);
            _mapperMock.Verify(x => x.Map<LogSummaryWithRelatedDto>(entity), Times.Once);
        }

        [TestMethod]
        public void Map_LogSummaryCreateToLogSummary_ShouldCallMapper()
        {
            // Arrange
            var command = new LogSummaryCreate
            {
                // TODO: Set test properties based on LogSummaryCreate command
            };

            var expectedEntity = new LogSummary
            {
                Id = 1
                // TODO: Set expected properties
            };

            _mapperMock.Setup(x => x.Map<LogSummary>(command))
                .Returns(expectedEntity);

            // Act
            var result = _mapperMock.Object.Map<LogSummary>(command);

            // Assert
            result.Should().NotBeNull();
            _mapperMock.Verify(x => x.Map<LogSummary>(command), Times.Once);
        }

        [TestMethod]
        public void Map_LogSummaryUpdateToLogSummary_ShouldCallMapper()
        {
            // Arrange
            var existingEntity = new LogSummary
            {
                Id = 1
                // TODO: Set existing properties
            };

            var command = new LogSummaryUpdate
            {
                Id = 1
                // TODO: Set updated properties
            };

            var expectedEntity = new LogSummary
            {
                Id = 1
                // TODO: Set expected properties after update
            };

            _mapperMock.Setup(x => x.Map(command, existingEntity))
                .Returns(expectedEntity);

            // Act
            var result = _mapperMock.Object.Map(command, existingEntity);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(1);
            _mapperMock.Verify(x => x.Map(command, existingEntity), Times.Once);
        }

        #endregion

    }
}