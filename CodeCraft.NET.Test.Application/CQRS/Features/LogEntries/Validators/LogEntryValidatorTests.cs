// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Validators;
using FluentAssertions;
using FluentValidation.TestHelper;
using Microsoft.VisualStudio.TestTools.UnitTesting;


namespace CodeCraft.NET.Test.Application.CQRS.Features.LogEntries.Validators
{
    [TestClass]
    public class LogEntryValidatorTests
    {
        private LogEntryCreateValidator _createValidator = null!;
        private LogEntryUpdateValidator _updateValidator = null!;

        [TestInitialize]
        public void Setup()
        {
            _createValidator = new LogEntryCreateValidator();
            _updateValidator = new LogEntryUpdateValidator();
        }

        #region Create Validator Tests

        [TestMethod]
        public void CreateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new LogEntryCreate
            {
                Timestamp = DateTime.UtcNow,
                Message = "TestMessage",
                Category = "TestCategory",
                Component = "TestComponent",
                Exception = "TestException",
                StackTrace = "TestStackTrace",
                AdditionalData = "TestAdditionalData",
                CorrelationId = "TestCorrelationId",
                SessionId = "TestSessionId",
                UserId = "TestUserId",
                MethodName = "TestMethodName",
                ClassName = "TestClassName",
                FileName = "TestFileName",
                ClientIP = "TestClientIP",
                UserAgent = "TestUserAgent",
                RequestUrl = "TestRequestUrl",
                HttpMethod = "TestHttpMethod",
                IsProcessed = true,
                AdminNotes = "TestAdminNotes",
                MessageHash = "TestMessageHash",
                OccurrenceCount = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void CreateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new LogEntryCreate();

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on LogEntry entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion

        #region Update Validator Tests

        [TestMethod]
        public void UpdateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new LogEntryUpdate
            {
                Id = 1,
                Timestamp = DateTime.UtcNow,
                Message = "TestMessage",
                Category = "TestCategory",
                Component = "TestComponent",
                Exception = "TestException",
                StackTrace = "TestStackTrace",
                AdditionalData = "TestAdditionalData",
                CorrelationId = "TestCorrelationId",
                SessionId = "TestSessionId",
                UserId = "TestUserId",
                MethodName = "TestMethodName",
                ClassName = "TestClassName",
                FileName = "TestFileName",
                ClientIP = "TestClientIP",
                UserAgent = "TestUserAgent",
                RequestUrl = "TestRequestUrl",
                HttpMethod = "TestHttpMethod",
                IsProcessed = true,
                AdminNotes = "TestAdminNotes",
                MessageHash = "TestMessageHash",
                OccurrenceCount = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void UpdateValidator_InvalidId_ShouldHaveValidationError()
        {
            // Arrange
            var command = new LogEntryUpdate
            {
                Id = 0, // Invalid ID
                Timestamp = DateTime.UtcNow,
                Message = "TestMessage",
                Category = "TestCategory",
                Component = "TestComponent",
                Exception = "TestException",
                StackTrace = "TestStackTrace",
                AdditionalData = "TestAdditionalData",
                CorrelationId = "TestCorrelationId",
                SessionId = "TestSessionId",
                UserId = "TestUserId",
                MethodName = "TestMethodName",
                ClassName = "TestClassName",
                FileName = "TestFileName",
                ClientIP = "TestClientIP",
                UserAgent = "TestUserAgent",
                RequestUrl = "TestRequestUrl",
                HttpMethod = "TestHttpMethod",
                IsProcessed = true,
                AdminNotes = "TestAdminNotes",
                MessageHash = "TestMessageHash",
                OccurrenceCount = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldHaveValidationErrorFor(x => x.Id);
        }

        [TestMethod]
        public void UpdateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new LogEntryUpdate { Id = 1 };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on LogEntry entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion
    }
}