// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogSummaries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogSummaries.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.LogSummaries.Validators;
using FluentAssertions;
using FluentValidation.TestHelper;
using Microsoft.VisualStudio.TestTools.UnitTesting;


namespace CodeCraft.NET.Test.Application.CQRS.Features.LogSummaries.Validators
{
    [TestClass]
    public class LogSummaryValidatorTests
    {
        private LogSummaryCreateValidator _createValidator = null!;
        private LogSummaryUpdateValidator _updateValidator = null!;

        [TestInitialize]
        public void Setup()
        {
            _createValidator = new LogSummaryCreateValidator();
            _updateValidator = new LogSummaryUpdateValidator();
        }

        #region Create Validator Tests

        [TestMethod]
        public void CreateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new LogSummaryCreate
            {
                SummaryDate = DateTime.UtcNow,
                Component = "TestComponent",
                DebugCount = 1,
                InfoCount = 1,
                WarningCount = 1,
                ErrorCount = 1,
                CriticalCount = 1,
                TotalCount = 1,
                TotalSizeBytes = 1L,
                UniqueUsersCount = 1,
                UniqueSessionsCount = 1,
                TopCategories = "TestTopCategories",
                TopErrors = "TestTopErrors",
                Notes = "TestNotes",
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void CreateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new LogSummaryCreate();

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on LogSummary entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion

        #region Update Validator Tests

        [TestMethod]
        public void UpdateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new LogSummaryUpdate
            {
                Id = 1,
                SummaryDate = DateTime.UtcNow,
                Component = "TestComponent",
                DebugCount = 1,
                InfoCount = 1,
                WarningCount = 1,
                ErrorCount = 1,
                CriticalCount = 1,
                TotalCount = 1,
                TotalSizeBytes = 1L,
                UniqueUsersCount = 1,
                UniqueSessionsCount = 1,
                TopCategories = "TestTopCategories",
                TopErrors = "TestTopErrors",
                Notes = "TestNotes",
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void UpdateValidator_InvalidId_ShouldHaveValidationError()
        {
            // Arrange
            var command = new LogSummaryUpdate
            {
                Id = 0, // Invalid ID
                SummaryDate = DateTime.UtcNow,
                Component = "TestComponent",
                DebugCount = 1,
                InfoCount = 1,
                WarningCount = 1,
                ErrorCount = 1,
                CriticalCount = 1,
                TotalCount = 1,
                TotalSizeBytes = 1L,
                UniqueUsersCount = 1,
                UniqueSessionsCount = 1,
                TopCategories = "TestTopCategories",
                TopErrors = "TestTopErrors",
                Notes = "TestNotes",
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldHaveValidationErrorFor(x => x.Id);
        }

        [TestMethod]
        public void UpdateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new LogSummaryUpdate { Id = 1 };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on LogSummary entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion
    }
}