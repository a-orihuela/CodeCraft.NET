// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Validators;
using FluentAssertions;
using FluentValidation.TestHelper;
using Microsoft.VisualStudio.TestTools.UnitTesting;


namespace CodeCraft.NET.Test.Application.CQRS.Features.LogConfigurations.Validators
{
    [TestClass]
    public class LogConfigurationValidatorTests
    {
        private LogConfigurationCreateValidator _createValidator = null!;
        private LogConfigurationUpdateValidator _updateValidator = null!;

        [TestInitialize]
        public void Setup()
        {
            _createValidator = new LogConfigurationCreateValidator();
            _updateValidator = new LogConfigurationUpdateValidator();
        }

        #region Create Validator Tests

        [TestMethod]
        public void CreateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new LogConfigurationCreate
            {
                Component = "TestComponent",
                NamespacePath = "TestNamespacePath",
                IsEnabled = true,
                LogToDatabase = true,
                LogToFile = true,
                LogToConsole = true,
                LogFilePath = "TestLogFilePath",
                LogFormat = "TestLogFormat",
                RetentionDays = 1,
                MaxFileSizeMB = 1,
                Description = "TestDescription",
                Priority = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void CreateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new LogConfigurationCreate();

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on LogConfiguration entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion

        #region Update Validator Tests

        [TestMethod]
        public void UpdateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new LogConfigurationUpdate
            {
                Id = 1,
                Component = "TestComponent",
                NamespacePath = "TestNamespacePath",
                IsEnabled = true,
                LogToDatabase = true,
                LogToFile = true,
                LogToConsole = true,
                LogFilePath = "TestLogFilePath",
                LogFormat = "TestLogFormat",
                RetentionDays = 1,
                MaxFileSizeMB = 1,
                Description = "TestDescription",
                Priority = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void UpdateValidator_InvalidId_ShouldHaveValidationError()
        {
            // Arrange
            var command = new LogConfigurationUpdate
            {
                Id = 0, // Invalid ID
                Component = "TestComponent",
                NamespacePath = "TestNamespacePath",
                IsEnabled = true,
                LogToDatabase = true,
                LogToFile = true,
                LogToConsole = true,
                LogFilePath = "TestLogFilePath",
                LogFormat = "TestLogFormat",
                RetentionDays = 1,
                MaxFileSizeMB = 1,
                Description = "TestDescription",
                Priority = 1,
                Active = true,
                CreatedOn = DateTime.UtcNow,
                CreatedBy = "TestCreatedBy",
                ModifiedBy = "TestModifiedBy",
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldHaveValidationErrorFor(x => x.Id);
        }

        [TestMethod]
        public void UpdateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new LogConfigurationUpdate { Id = 1 };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on LogConfiguration entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion
    }
}