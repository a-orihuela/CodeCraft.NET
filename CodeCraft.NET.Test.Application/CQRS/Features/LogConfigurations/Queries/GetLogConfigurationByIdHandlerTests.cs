// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using AutoMapper;
using CodeCraft.NET.Application.Contracts.Persistence.Repositories;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Queries.GetLogConfigurationById;
using CodeCraft.NET.Application.DTOs.LogConfigurations;
using CodeCraft.NET.Domain.Model;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;


namespace CodeCraft.NET.Test.Application.CQRS.Features.LogConfigurations.Queries
{
    [TestClass]
    public class GetLogConfigurationByIdHandlerTests
    {
        private Mock<ILogConfigurationRepository> _repositoryMock = null!;
        private Mock<IMapper> _mapperMock = null!;
        private GetLogConfigurationByIdHandler _handler = null!;

        [TestInitialize]
        public void Setup()
        {
            _repositoryMock = new Mock<ILogConfigurationRepository>();
            _mapperMock = new Mock<IMapper>();

            _handler = new GetLogConfigurationByIdHandler(_repositoryMock.Object, _mapperMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _repositoryMock.Reset();
            _mapperMock.Reset();
        }

        [TestMethod]
        public async Task Handle_ExistingEntity_ReturnsDto()
        {
            // Arrange
            var query = new GetLogConfigurationByIdQuery { Id = 1 };
            var entity = new LogConfiguration { Id = 1 };
            var dto = new LogConfigurationDto { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(query.Id))
                .ReturnsAsync(entity);

            _mapperMock.Setup(x => x.Map<LogConfigurationDto>(entity))
                .Returns(dto);

            // Act
            var result = await _handler.Handle(query, CancellationToken.None);

            // Assert
            result.Should().NotBeNull();
            result.Should().BeEquivalentTo(dto);

            _repositoryMock.Verify(x => x.GetByIdAsync(query.Id), Times.Once);
            _mapperMock.Verify(x => x.Map<LogConfigurationDto>(entity), Times.Once);
        }

        [TestMethod]
        public async Task Handle_NonExistentEntity_ReturnsNull()
        {
            // Arrange
            var query = new GetLogConfigurationByIdQuery { Id = 999 };

            _repositoryMock.Setup(x => x.GetByIdAsync(query.Id))
                .ReturnsAsync((LogConfiguration?)null);

            // Act
            var result = await _handler.Handle(query, CancellationToken.None);

            // Assert
            result.Should().BeNull();

            _repositoryMock.Verify(x => x.GetByIdAsync(query.Id), Times.Once);
            _mapperMock.Verify(x => x.Map<LogConfigurationDto>(It.IsAny<LogConfiguration>()), Times.Never);
        }

        [TestMethod]
        public async Task Handle_RepositoryThrowsException_PropagatesException()
        {
            // Arrange
            var query = new GetLogConfigurationByIdQuery { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(query.Id))
                .ThrowsAsync(new Exception("Database error"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(query, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(query.Id), Times.Once);
        }

        [TestMethod]
        public async Task Handle_MappingThrowsException_PropagatesException()
        {
            // Arrange
            var query = new GetLogConfigurationByIdQuery { Id = 1 };
            var entity = new LogConfiguration { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(query.Id))
                .ReturnsAsync(entity);

            _mapperMock.Setup(x => x.Map<LogConfigurationDto>(entity))
                .Throws(new Exception("Mapping failed"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(query, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(query.Id), Times.Once);
            _mapperMock.Verify(x => x.Map<LogConfigurationDto>(entity), Times.Once);
        }
    }
}