// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using AutoMapper;
using CodeCraft.NET.Application.Contracts.Persistence;
using CodeCraft.NET.Application.Contracts.Persistence.Repositories;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Create;
using CodeCraft.NET.Domain.Model;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;


namespace CodeCraft.NET.Test.Application.CQRS.Features.LogConfigurations.Commands.Create
{
    [TestClass]
    public class LogConfigurationCreateHandlerTests
    {
        private Mock<ILogConfigurationRepository> _repositoryMock = null!;
        private Mock<ICodeCraftUnitOfWork> _unitOfWorkMock = null!;
        private Mock<IMapper> _mapperMock = null!;
        private Mock<ILogger<LogConfigurationCreateHandler>> _loggerMock = null!;
        private LogConfigurationCreateHandler _handler = null!;

        [TestInitialize]
        public void Setup()
        {
            _repositoryMock = new Mock<ILogConfigurationRepository>();
            _unitOfWorkMock = new Mock<ICodeCraftUnitOfWork>();
            _mapperMock = new Mock<IMapper>();
            _loggerMock = new Mock<ILogger<LogConfigurationCreateHandler>>();

            // Setup specific repository property
            _unitOfWorkMock.Setup(x => x.LogConfigurationRepository)
                .Returns(_repositoryMock.Object);

            // Setup generic Repository<T>() method for base handler compatibility
            _unitOfWorkMock.Setup(x => x.Repository<LogConfiguration>())
                .Returns(_repositoryMock.Object);

            _handler = new LogConfigurationCreateHandler(_unitOfWorkMock.Object, _mapperMock.Object, _loggerMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _repositoryMock.Reset();
            _unitOfWorkMock.Reset();
            _mapperMock.Reset();
            _loggerMock.Reset();
        }

        [TestMethod]
        public async Task Handle_ValidCommand_CreatesEntityAndReturnsId()
        {
            // Arrange
            var command = new LogConfigurationCreate
            {
                // TODO: Set test properties based on LogConfiguration entity
            };

            var entity = new LogConfiguration
            {
                Id = 1
                // TODO: Set test properties based on LogConfiguration entity  
            };

            _mapperMock.Setup(x => x.Map<LogConfiguration>(command))
                .Returns(entity);

            // The base handler uses AddEntity() not AddAsync()
            _repositoryMock.Setup(x => x.AddEntity(It.IsAny<LogConfiguration>()));

            _unitOfWorkMock.Setup(x => x.Complete())
                .ReturnsAsync(1);

            // Act
            var result = await _handler.Handle(command, CancellationToken.None);

            // Assert
            result.Should().Be(entity.Id);

            _mapperMock.Verify(x => x.Map<LogConfiguration>(command), Times.Once);
            _repositoryMock.Verify(x => x.AddEntity(It.IsAny<LogConfiguration>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Once);
        }

        [TestMethod]
        public async Task Handle_MappingFails_PropagatesException()
        {
            // Arrange
            var command = new LogConfigurationCreate();

            _mapperMock.Setup(x => x.Map<LogConfiguration>(command))
                .Throws(new Exception("Mapping failed"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _mapperMock.Verify(x => x.Map<LogConfiguration>(command), Times.Once);
            _repositoryMock.Verify(x => x.AddEntity(It.IsAny<LogConfiguration>()), Times.Never);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Never);
        }

        [TestMethod]
        public async Task Handle_RepositoryThrowsException_PropagatesException()
        {
            // Arrange
            var command = new LogConfigurationCreate();
            var entity = new LogConfiguration();

            _mapperMock.Setup(x => x.Map<LogConfiguration>(command))
                .Returns(entity);

            _repositoryMock.Setup(x => x.AddEntity(It.IsAny<LogConfiguration>()))
                .Throws(new Exception("Database error"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _mapperMock.Verify(x => x.Map<LogConfiguration>(command), Times.Once);
            _repositoryMock.Verify(x => x.AddEntity(It.IsAny<LogConfiguration>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Never);
        }

        [TestMethod]
        public async Task Handle_CompleteThrowsException_PropagatesException()
        {
            // Arrange
            var command = new LogConfigurationCreate();
            var entity = new LogConfiguration { Id = 1 };

            _mapperMock.Setup(x => x.Map<LogConfiguration>(command))
                .Returns(entity);

            _repositoryMock.Setup(x => x.AddEntity(It.IsAny<LogConfiguration>()));

            _unitOfWorkMock.Setup(x => x.Complete())
                .ThrowsAsync(new Exception("Save failed"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _mapperMock.Verify(x => x.Map<LogConfiguration>(command), Times.Once);
            _repositoryMock.Verify(x => x.AddEntity(It.IsAny<LogConfiguration>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Once);
        }

        [TestMethod]
        public async Task Handle_CompleteReturnsZero_ThrowsException()
        {
            // Arrange
            var command = new LogConfigurationCreate();
            var entity = new LogConfiguration { Id = 5 };

            _mapperMock.Setup(x => x.Map<LogConfiguration>(command))
                .Returns(entity);

            _repositoryMock.Setup(x => x.AddEntity(It.IsAny<LogConfiguration>()));

            _unitOfWorkMock.Setup(x => x.Complete())
                .ReturnsAsync(0); // No rows affected - handler should throw exception

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _mapperMock.Verify(x => x.Map<LogConfiguration>(command), Times.Once);
            _repositoryMock.Verify(x => x.AddEntity(It.IsAny<LogConfiguration>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Once);
        }
    }
}