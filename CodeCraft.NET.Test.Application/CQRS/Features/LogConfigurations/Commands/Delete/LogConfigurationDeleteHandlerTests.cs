// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using AutoMapper;
using CodeCraft.NET.Application.Contracts.Persistence;
using CodeCraft.NET.Application.Contracts.Persistence.Repositories;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Delete;
using CodeCraft.NET.Application.Middleware.Exceptions;
using CodeCraft.NET.Domain.Model;
using FluentAssertions;
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;


namespace CodeCraft.NET.Test.Application.CQRS.Features.LogConfigurations.Commands.Delete
{
    [TestClass]
    public class LogConfigurationDeleteHandlerTests
    {
        private Mock<ILogConfigurationRepository> _repositoryMock = null!;
        private Mock<ICodeCraftUnitOfWork> _unitOfWorkMock = null!;
        private Mock<IMapper> _mapperMock = null!;
        private Mock<ILogger<LogConfigurationDeleteHandler>> _loggerMock = null!;
        private LogConfigurationDeleteHandler _handler = null!;

        [TestInitialize]
        public void Setup()
        {
            _repositoryMock = new Mock<ILogConfigurationRepository>();
            _unitOfWorkMock = new Mock<ICodeCraftUnitOfWork>();
            _mapperMock = new Mock<IMapper>();
            _loggerMock = new Mock<ILogger<LogConfigurationDeleteHandler>>();

            // Setup specific repository property
            _unitOfWorkMock.Setup(x => x.LogConfigurationRepository)
                .Returns(_repositoryMock.Object);

            // Setup generic Repository<T>() method for base handler compatibility
            _unitOfWorkMock.Setup(x => x.Repository<LogConfiguration>())
                .Returns(_repositoryMock.Object);

            _handler = new LogConfigurationDeleteHandler(_unitOfWorkMock.Object, _mapperMock.Object, _loggerMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _repositoryMock.Reset();
            _unitOfWorkMock.Reset();
            _mapperMock.Reset();
            _loggerMock.Reset();
        }

        [TestMethod]
        public async Task Handle_ValidCommand_DeletesEntityAndReturnsTrue()
        {
            // Arrange
            var command = new LogConfigurationDelete { Id = 1 };
            var existingEntity = new LogConfiguration { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync(existingEntity);

            // The base handler uses DeleteEntity() not DeleteAsync()
            _repositoryMock.Setup(x => x.DeleteEntity(existingEntity));

            _unitOfWorkMock.Setup(x => x.Complete())
                .ReturnsAsync(1);

            // Act
            var result = await _handler.Handle(command, CancellationToken.None);

            // Assert
            result.Should().BeTrue();

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _repositoryMock.Verify(x => x.DeleteEntity(existingEntity), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Once);
        }

        [TestMethod]
        public async Task Handle_EntityNotFound_ThrowsNotFoundException()
        {
            // Arrange
            var command = new LogConfigurationDelete { Id = 999 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync((LogConfiguration?)null);

            // Act & Assert
            await Assert.ThrowsExceptionAsync<NotFoundException>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _repositoryMock.Verify(x => x.DeleteEntity(It.IsAny<LogConfiguration>()), Times.Never);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Never);
        }

        [TestMethod]
        public async Task Handle_RepositoryGetByIdThrowsException_PropagatesException()
        {
            // Arrange
            var command = new LogConfigurationDelete { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ThrowsAsync(new Exception("Database error"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
        }

        [TestMethod]
        public async Task Handle_RepositoryDeleteThrowsException_PropagatesException()
        {
            // Arrange
            var command = new LogConfigurationDelete { Id = 1 };
            var existingEntity = new LogConfiguration { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync(existingEntity);

            _repositoryMock.Setup(x => x.DeleteEntity(existingEntity))
                .Throws(new Exception("Delete failed"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _repositoryMock.Verify(x => x.DeleteEntity(existingEntity), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Never);
        }

        [TestMethod]
        public async Task Handle_CompleteReturnsZero_ThrowsException()
        {
            // Arrange
            var command = new LogConfigurationDelete { Id = 1 };
            var existingEntity = new LogConfiguration { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync(existingEntity);

            _repositoryMock.Setup(x => x.DeleteEntity(existingEntity));

            _unitOfWorkMock.Setup(x => x.Complete())
                .ReturnsAsync(0); // No rows affected - handler should throw exception

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _repositoryMock.Verify(x => x.DeleteEntity(existingEntity), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Once);
        }
    }
}