name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
    
    - name: Pack template
      run: |
        # Clean previous packages
        rm -rf ./template-package
        # Pack template with a unique version to avoid caching issues
        dotnet pack Template/Template.csproj --configuration Release --output ./template-package -p:PackageVersion=99.99.99-ci-${{ github.run_number }}
    
    - name: Debug template package contents
      run: |
        echo "Template package contents:"
        unzip -l ./template-package/*.nupkg | grep -E "(content/|\.cs|\.csproj|\.sln)" | head -20
        echo "Package created successfully"
    
    - name: Install template locally
      run: |
        # Uninstall any existing version first
        dotnet new uninstall CodeCraft.NET.CleanArchitecture.Template || true
        # Clear template cache completely
        rm -rf ~/.templateengine || true
        rm -rf ~/.dotnet/templating || true
        # Install from the packaged template
        TEMPLATE_PACKAGE=$(find ./template-package -name "*.nupkg" | head -n 1)
        echo "Installing template package: $TEMPLATE_PACKAGE"
        dotnet new install "$TEMPLATE_PACKAGE" --force
    
    - name: Verify template installation
      run: |
        echo "Installed templates:"
        dotnet new list codecraft
        echo "Template help output:"
        dotnet new codecraft --help
    
    - name: Test template creation (SQL Server)
      run: |
        # Create test directory with proper permissions
        mkdir -p test-sqlserver
        cd test-sqlserver
        # Ensure we have write permissions in the current directory
        chmod 755 .
        echo "Creating project in directory: $(pwd)"
        echo "Available disk space:"
        df -h .
        echo "Current user permissions:"
        id
        # Test template creation with verbose output
        dotnet new codecraft -n TestProjectSqlServer --verbosity diagnostic || {
          echo "Template creation failed. Checking for any partial files:"
          find . -name "*" -type f 2>/dev/null || echo "No files found"
          exit 1
        }
        cd TestProjectSqlServer
        # Debug: List all files to understand the structure
        echo "Files in project directory:"
        find . -name "*.sln" -o -name "*.csproj" | head -10
        # Find and build the solution file
        SOLUTION_FILE=$(find . -name "*.sln" -type f | head -n 1)
        if [ -z "$SOLUTION_FILE" ]; then
          echo "Error: No solution file found!"
          echo "Directory contents:"
          ls -la
          exit 1
        fi
        echo "Building solution: $SOLUTION_FILE"
        dotnet build "$SOLUTION_FILE"
        cd ../..
    
    - name: Test basic functionality
      run: |
        cd test-sqlserver/TestProjectSqlServer
        echo "Testing project structure..."
        # Verify key files exist
        if [ ! -f "TestProjectSqlServer.sln" ]; then
          echo "? Solution file missing"
          exit 1
        fi
        if [ ! -f "TestProjectSqlServer.WebAPI/TestProjectSqlServer.WebAPI.csproj" ]; then
          echo "? WebAPI project missing"
          exit 1
        fi
        echo "? Basic project structure validated"
        cd ../..

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Pack template for release
      run: dotnet pack Template/Template.csproj --configuration Release --output ./release-package
    
    - name: Publish to NuGet
      run: |
        PACKAGE_FILE=$(find ./release-package -name "*.nupkg" | head -n 1)
        echo "Publishing package: $PACKAGE_FILE"
        # Uncomment the line below when ready to publish to NuGet
        # dotnet nuget push "$PACKAGE_FILE" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        echo "Package ready for publication: $PACKAGE_FILE"