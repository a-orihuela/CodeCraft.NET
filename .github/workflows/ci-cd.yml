name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  TEMPLATE_NAME: 'CodeCraft.NET.CleanArchitecture.Template'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Template
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
    
    - name: Install template locally
      run: dotnet new install .
    
    - name: Test template creation (SQL Server)
      run: |
        mkdir test-sqlserver
        cd test-sqlserver
        dotnet new codecraft -n TestProjectSqlServer --DatabaseProvider SqlServer
        dotnet build
        cd ..
    
    - name: Test template creation (PostgreSQL)
      run: |
        mkdir test-postgresql  
        cd test-postgresql
        dotnet new codecraft -n TestProjectPostgreSQL --DatabaseProvider PostgreSQL
        dotnet build
        cd ..
    
    - name: Test code generation
      run: |
        cd test-sqlserver/TestProjectSqlServer
        # Create a test entity
        cat > TestProjectSqlServer.Domain/Model/TestEntity.cs << 'EOF'
        using CodeCraft.NET.Cross.Domain;
        namespace TestProjectSqlServer.Domain.Model;
        public class TestEntity : BaseDomainModel
        {
            public string Name { get; set; } = string.Empty;
            public string Description { get; set; } = string.Empty;
        }
        EOF
        # Run code generator
        dotnet run --project TestProjectSqlServer.Generator
        # Build again to ensure generated code compiles
        dotnet build
        cd ../..

  build-and-pack:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Pack Template
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build solution
      run: dotnet build --configuration Release
    
    - name: Pack template
      run: dotnet pack template.csproj --configuration Release --output ./nupkg
    
    - name: Upload NuGet package
      uses: actions/upload-artifact@v3
      with:
        name: nuget-package
        path: ./nupkg/*.nupkg

  publish:
    runs-on: ubuntu-latest
    needs: [test, build-and-pack]
    name: Publish to NuGet
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Download NuGet package
      uses: actions/download-artifact@v3
      with:
        name: nuget-package
        path: ./nupkg
    
    - name: Publish to NuGet
      run: |
        dotnet nuget push ./nupkg/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

  create-release:
    runs-on: ubuntu-latest
    needs: [test, build-and-pack]
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download NuGet package
      uses: actions/download-artifact@v3
      with:
        name: nuget-package
        path: ./nupkg
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: CodeCraft.NET v${{ steps.version.outputs.VERSION }}
        body: |
          ## CodeCraft.NET Clean Architecture Template v${{ steps.version.outputs.VERSION }}
          
          ### ?? Installation
          ```bash
          dotnet new install CodeCraft.NET.CleanArchitecture.Template::${{ steps.version.outputs.VERSION }}
          ```
          
          ### ?? NuGet Package
          https://www.nuget.org/packages/CodeCraft.NET.CleanArchitecture.Template/${{ steps.version.outputs.VERSION }}
          
          ### ?? Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ### ?? Usage
          ```bash
          # Create new project
          dotnet new codecraft -n "MyProject"
          
          # With PostgreSQL
          dotnet new codecraft -n "MyProject" --DatabaseProvider PostgreSQL
          ```
        draft: false
        prerelease: false