using CodeCraft.NET.Generator;
using CodeCraft.NET.Generator.Generators;
using CodeCraft.NET.Generator.Helpers;
using CodeCraft.NET.Generator.Models;
using CodeCraft.NET.Generator.Renderers;

// ============================================
// DEFAULT GENERATION CONFIGURATION
// ============================================
// Change these values to control what is generated by default
const bool GENERATE_WEB_API = true;           // Generate WebAPI Controllers
const bool GENERATE_DESKTOP_API = true;       // Generate Desktop API Services
const bool GENERATE_MAUI = true;              // Generate MAUI components
const bool DEFAULT_USE_SQLITE = true;         // SQLite by default (better for MAUI)

try
{
	Console.WriteLine("CodeCraft.NET Generator Starting...");

	// Check for command line arguments
	if (args.Length > 0 && args[0].Equals("cleanAll", StringComparison.OrdinalIgnoreCase))
	{
		Console.WriteLine("Clean mode activated - Removing all generated files...");
		CleanupManager.CleanAll();
		Console.WriteLine("Template cleaned successfully!");
		Console.WriteLine("You can now use the template as a clean base or add your own entities to the Domain project.");
		return;
	}

	// Check for command line arguments
	if (args.Length > 0 && args[0].Equals("clean", StringComparison.OrdinalIgnoreCase))
	{
		Console.WriteLine("Clean mode activated - Removing all generated files...");
		CleanupManager.CleanGeneratedFilesOnly();
		Console.WriteLine("Template cleaned successfully!");
		Console.WriteLine("You can now use the template as a clean base or add your own entities to the Domain project.");
		return;
	}

	// Show available commands
	if (args.Length > 0 && (args[0].Equals("help", StringComparison.OrdinalIgnoreCase) || args[0].Equals("--help", StringComparison.OrdinalIgnoreCase) || args[0].Equals("-h", StringComparison.OrdinalIgnoreCase)))
	{
		ShowHelp();
		return;
	}

	// ============================================
	// DATABASE CONFIGURATION
	// ============================================
	string databaseProvider = DEFAULT_USE_SQLITE ? "SQLite" : "SqlServer";
	
	if (args.Contains("--sqlite"))
	{
		databaseProvider = "SQLite";
		Console.WriteLine("Using SQLite database provider (--sqlite override)");
	}
	else if (args.Contains("--sqlserver"))
	{
		databaseProvider = "SqlServer";
		Console.WriteLine("Using SQL Server database provider (--sqlserver override)");
	}
	else
	{
		// Check configuration file for default provider
		var config = CodeCraftConfig.Instance;
		var configProvider = config.DataBaseConfig.DatabaseProvider;
		if (!string.IsNullOrEmpty(configProvider))
		{
			databaseProvider = configProvider;
		}
		Console.WriteLine($"Using {databaseProvider} database provider (default configuration)");
	}

	// ============================================
	// COMPONENT GENERATION CONFIGURATION
	// ============================================
	bool generateWebApi = GENERATE_WEB_API;
	bool generateDesktopApi = GENERATE_DESKTOP_API;
	bool generateMaui = GENERATE_MAUI;

	// Override with flags
	if (args.Contains("--no-web")) generateWebApi = false;
	if (args.Contains("--no-desktop")) generateDesktopApi = false;
	if (args.Contains("--no-maui")) generateMaui = false;

	// Force activation with flags
	if (args.Contains("--web")) generateWebApi = true;
	if (args.Contains("--desktop")) generateDesktopApi = true;
	if (args.Contains("--maui")) generateMaui = true;

	// Show what will be generated
	Console.WriteLine("Components to generate:");
	Console.WriteLine($"  Infrastructure & CQRS: Always generated");
	Console.WriteLine($"  {(generateWebApi ? "OK" : "ERROR")} Web API Controllers: {generateWebApi}");
	Console.WriteLine($"  {(generateDesktopApi ? "OK" : "ERROR")} Desktop API Services: {generateDesktopApi}");
	Console.WriteLine($"  {(generateMaui ? "OK" : "ERROR")} MAUI Components: {generateMaui}");

	// Check for force migration flag
	bool forceMigration = args.Contains("--force-migration") || args.Contains("-f");
	if (forceMigration)
	{
		Console.WriteLine("Force migration mode activated");
	}

	var rootPath = Path.GetFullPath(Path.Combine(AppContext.BaseDirectory, "../../../../"));
	var envPath = Path.Combine(rootPath, ".env");

	EnvLoader.LoadEnvFile(envPath);

	var entitiesMetadata = EntityAnalyzer.AnalyzeDomainEntities();
	
	Console.WriteLine($"Found {entitiesMetadata.Count} entities:");
	foreach (var entity in entitiesMetadata)
	{
		Console.WriteLine($"   - {entity.Name} ({entity.Properties.Count} properties)");
	}

	if (entitiesMetadata.Count == 0)
	{
		Console.WriteLine("No entities found in Domain project.");
		Console.WriteLine("Add entities to CodeCraft.NET.Domain/Model/ and run the generator again.");
		Console.WriteLine("Or run 'dotnet run clean' to clean all generated files.");
		return;
	}

	// Clean previously generated files (without touching Domain entities)
	CleanupManager.CleanGeneratedFilesOnly();

	var renderer = new ScribanTemplateRenderer();
	var cqrsGenerator = new CQRSGenerator(renderer);
	var repoGenerator = new RepositoryGenerator(renderer);
	var controllerGenerator = new ControllerGenerator(renderer);
	var desktopApiGenerator = new DesktopApiGenerator(renderer);
	var dbContextGenerator = new DbContextGenerator(renderer);
	var infrastructureGenerator = new InfrastructureGenerator(renderer);
	var mauiGenerator = new MauiGenerator(renderer);

	Console.WriteLine("Generating code files...");

	// 1. Generate Infrastructure services with selected database provider (ALWAYS)
	infrastructureGenerator.Generate(databaseProvider);

	// 2. Generate DbContext first (ALWAYS)
	dbContextGenerator.Generate(entitiesMetadata);

	// 3. Generate CQRS components for each entity (ALWAYS)
	foreach (var entity in entitiesMetadata)
	{
		Console.WriteLine($"   Generating files for {entity.Name}...");
		cqrsGenerator.Generate(entity);
		
		// Generate Web API Controllers (CONDITIONAL)
		if (generateWebApi)
		{
			controllerGenerator.Generate(entity);
		}
		
		// Generate Desktop API Services (CONDITIONAL)
		if (generateDesktopApi)
		{
			desktopApiGenerator.Generate(entity);
		}
	}

	// 4. Generate common components
	cqrsGenerator.GenerateMapping(entitiesMetadata);
	repoGenerator.Generate(entitiesMetadata);
	
	if (generateDesktopApi)
	{
		desktopApiGenerator.GenerateServiceRegistration(entitiesMetadata);
	}

	// 5. Generate MAUI components (CONDITIONAL)
	if (generateMaui)
	{
		mauiGenerator.Generate(entitiesMetadata);
	}

	Console.WriteLine("Creating database migrations...");

	// 6. Generate migrations after DbContext is created
	if (forceMigration)
	{
		Console.WriteLine("   Forcing migration creation...");
		MigrationGenerator.ForceGenerateMigration();
	}
	else
	{
		MigrationGenerator.GenerateAllMigrations();
	}

	if (!forceMigration)
	{
		// 7. Check for pending migrations
		MigrationChecker.CheckPendingMigrations("ApplicationDbContext");
	}

	Console.WriteLine("Code generation completed successfully!");
	Console.WriteLine($"Generated for {databaseProvider} database provider");
	
	// Summary
	var generatedComponents = new List<string>();
	if (generateWebApi) generatedComponents.Add("Web API Controllers");
	if (generateDesktopApi) generatedComponents.Add("Desktop API Services");
	if (generateMaui) generatedComponents.Add("MAUI Components");
	
	Console.WriteLine($"Generated: {string.Join(", ", generatedComponents)}");
}
catch (Exception ex)
{
	Console.WriteLine($"Error during code generation: {ex.Message}");
	Console.WriteLine($"Stack trace: {ex.StackTrace}");
	Environment.Exit(1);
}

static void ShowHelp()
{
	Console.WriteLine("CodeCraft.NET Generator - Usage:");
	Console.WriteLine();
	Console.WriteLine("DEFAULT BEHAVIOR:");
	Console.WriteLine("  dotnet run                       - Generate ALL components (Web API + Desktop API + MAUI) with SQLite");
	Console.WriteLine();
	Console.WriteLine("Commands:");
	Console.WriteLine("  dotnet run                       - Generate code for all entities");
	Console.WriteLine("  dotnet run clean                 - Clean generated files (keep Domain entities)");
	Console.WriteLine("  dotnet run cleanAll              - Clean all generated files and example entities");
	Console.WriteLine("  dotnet run help                  - Show this help message");
	Console.WriteLine();
	Console.WriteLine("Database Options:");
	Console.WriteLine("  --sqlite                         - Use SQLite database provider");
	Console.WriteLine("  --sqlserver                      - Use SQL Server database provider");
	Console.WriteLine();
	Console.WriteLine("Component Generation Options:");
	Console.WriteLine("  --web                            - Force generate Web API Controllers");
	Console.WriteLine("  --desktop                        - Force generate Desktop API Services");
	Console.WriteLine("  --maui                           - Force generate MAUI Components");
	Console.WriteLine("  --no-web                         - Skip Web API Controllers generation");
	Console.WriteLine("  --no-desktop                     - Skip Desktop API Services generation");
	Console.WriteLine("  --no-maui                        - Skip MAUI Components generation");
	Console.WriteLine();
	Console.WriteLine("Other Options:");
	Console.WriteLine("  --force-migration, -f            - Force migration creation even if no changes detected");
	Console.WriteLine();
	Console.WriteLine("Examples:");
	Console.WriteLine("  dotnet run                       # Generate EVERYTHING with SQLite (default)");
	Console.WriteLine("  dotnet run --sqlserver           # Generate everything with SQL Server");
	Console.WriteLine("  dotnet run --no-maui             # Skip MAUI generation (Web + Desktop only)");
	Console.WriteLine("  dotnet run --no-web --no-desktop # Generate only MAUI components");
	Console.WriteLine("  dotnet run --sqlite -f           # SQLite with force migration");
	Console.WriteLine("  dotnet run clean                 # Remove generated files, keep your entities");
	Console.WriteLine("  dotnet run cleanAll              # Complete reset, remove everything");
	Console.WriteLine();
	Console.WriteLine("CUSTOMIZATION:");
	Console.WriteLine("  Edit the constants at the top of Program.cs to change default behavior:");
	Console.WriteLine("  - GENERATE_WEB_API = true/false");
	Console.WriteLine("  - GENERATE_DESKTOP_API = true/false");
	Console.WriteLine("  - GENERATE_MAUI = true/false");
	Console.WriteLine("  - DEFAULT_USE_SQLITE = true/false");
	Console.WriteLine();
	Console.WriteLine("Database Provider Notes:");
	Console.WriteLine("  - SQLite: Perfect for MAUI/Desktop apps, single file database");
	Console.WriteLine("  - SQL Server: Best for web applications and production scenarios");
	Console.WriteLine();
	Console.WriteLine("MAUI Generation Notes:");
	Console.WriteLine("  - ViewModels: Base files always regenerated, .Custom.cs files preserved");
	Console.WriteLine("  - Views: .Generated.xaml always regenerated, custom .xaml files preserved");
	Console.WriteLine("  - File Structure:");
	Console.WriteLine("    ├── ViewModels/Custom/EntityViewModel.Custom.cs    (your customizations)");
	Console.WriteLine("    └── Views/Custom/Entity/                           (your custom views)");
	Console.WriteLine();
	Console.WriteLine("Migration Behavior:");
	Console.WriteLine("  - By default, migrations are created only when model changes are detected");
	Console.WriteLine("  - Use --force-migration to always create a migration");
	Console.WriteLine("  - Recent migrations (within 2 minutes) are automatically skipped");
	Console.WriteLine();
	Console.WriteLine("Quick Start:");
	Console.WriteLine("  1. Add your entities to CodeCraft.NET.Domain/Model/");
	Console.WriteLine("  2. Run 'dotnet run' (generates everything with SQLite)");
	Console.WriteLine("  3. For web-only: 'dotnet run --no-maui --no-desktop --sqlserver'");
	Console.WriteLine("  4. For MAUI-only: 'dotnet run --no-web'");
	Console.WriteLine();
	Console.WriteLine("Generated Components:");
	Console.WriteLine("  MAUI: ViewModels, Pages, Services, Navigation, Dependency Injection");
	Console.WriteLine("  Desktop API: Direct services for MAUI/Desktop applications");
	Console.WriteLine("  Web API: HTTP Controllers with full CRUD operations");
	Console.WriteLine("  Infrastructure: CQRS, Repositories, Entity Framework, Migrations");
}