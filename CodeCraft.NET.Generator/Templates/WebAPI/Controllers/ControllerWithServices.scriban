// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.AspNetCore.Mvc",
    "CodeCraft.NET.Services.Services",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Create",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Update"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ ServerProjectName }}.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public partial class {{ Name }}Controller : ControllerBase
    {
        private readonly {{ Name }}Service _{{ name }}Service;

        public {{ Name }}Controller({{ Name }}Service {{ name }}Service)
        {
            _{{ name }}Service = {{ name }}Service;
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] {{ Name }}Create command)
        {
            var result = await _{{ name }}Service.CreateAsync(command);
            
            if (result.IsSuccess)
            {
                return Ok(new { id = result.Data });
            }
            
            return BadRequest(new { error = result.ErrorMessage, validationErrors = result.ValidationErrors });
        }

        [HttpPut]
        public async Task<IActionResult> Update([FromBody] {{ Name }}Update command)
        {
            var result = await _{{ name }}Service.UpdateAsync(command);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return BadRequest(new { error = result.ErrorMessage, validationErrors = result.ValidationErrors });
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var result = await _{{ name }}Service.DeleteAsync(id);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return BadRequest(new { error = result.ErrorMessage });
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var result = await _{{ name }}Service.GetByIdAsync(id);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return NotFound(new { error = result.ErrorMessage });
        }

        [HttpGet("{id}/related")]
        public async Task<IActionResult> GetWithRelated(int id)
        {
            var result = await _{{ name }}Service.GetWithRelatedAsync(id);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return NotFound(new { error = result.ErrorMessage });
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var result = await _{{ name }}Service.GetAllAsync();
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return BadRequest(new { error = result.ErrorMessage });
        }
    }
}