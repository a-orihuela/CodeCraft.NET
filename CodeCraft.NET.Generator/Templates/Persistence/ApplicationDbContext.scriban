// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    CrossProjectName + ".Domain",
    DomainProjectName + ".Model", 
    "Microsoft.EntityFrameworkCore"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}
namespace {{ InfrastructureProjectName }}.Persistence
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
        }

        // Domain entities
{{~ for entity in entities ~}}
        public DbSet<{{ entity.Name }}> {{ entity.NamePlural }} { get; set; } = null!;
{{~ end ~}}

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            ApplyAuditInfo();
            return base.SaveChangesAsync(cancellationToken);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            
            // Apply all configurations from assembly
            modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationDbContext).Assembly);
        }

        private void ApplyAuditInfo()
        {
            var now = DateTime.UtcNow;
            foreach (var entry in ChangeTracker.Entries())
            {
                if(entry == null)
                    continue;
				if (entry.Entity is IAuditable auditable)
                {
                    if (entry.State == EntityState.Added)
                    {
                        if (auditable.CreatedOn == default) auditable.CreatedOn = now;
                    }

                    if (entry.State == EntityState.Modified)
                    {
                        auditable.ModifiedOn = now;
                    }
                }
            }
        }

    }
}