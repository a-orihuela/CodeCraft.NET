// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using System.Collections;
using Microsoft.EntityFrameworkCore;
using {{ CodeCraftNETCrossName }}.Domain;
using {{ ApplicationProjectName }}.Contracts.Persistence;
using {{ ApplicationProjectName }}.Contracts.Persistence.Repositories;
using {{ InfrastructureProjectName }}.Persistence.Repositories;
using {{ ApplicationProjectName }}.Contracts.Persistence.Base;

namespace {{ InfrastructureProjectName }}.Persistence;

public partial class {{ UnitOfWorkImplementationName }} : {{ UnitOfWorkInterfaceName }}
{
    private Hashtable _repositories;
    private readonly ApplicationDbContext _context;

    {{~ for entity in entities ~}}
    private I{{ entity.Name }}Repository _{{ entity.Name }}Repository { get; set; }
    public I{{ entity.Name }}Repository {{ entity.Name }}Repository => _{{ entity.Name }}Repository ??= new {{ entity.Name }}Repository(_context);
    {{~ end ~}}

	public async Task<int> Complete()
    {
        try
        {
            return await _context.SaveChangesAsync();
        }
		catch (DbUpdateException ex)
		{
			throw new Exception("Error saving changes to the database", ex);
		}
		catch (Exception ex)
        {
			throw new Exception("Unexpected error when running UnitOfWork", ex);
		}
	}

    public void Dispose()
    {
        _context.Dispose();
    }

    public IAsyncRepository<TEntity> Repository<TEntity>() where TEntity : BaseDomainModel
    {
        _repositories ??= [];

        string type = typeof(TEntity).Name;

        if (!_repositories.ContainsKey(type))
        {
            Type repositoryType = typeof(RepositoryBase<,>);
            object? repositoryInstance = Activator.CreateInstance(repositoryType.MakeGenericType(typeof(TEntity)), _context);
            _repositories.Add(type, repositoryInstance);
        }

        return (IAsyncRepository<TEntity>)_repositories[type];
    }
}
