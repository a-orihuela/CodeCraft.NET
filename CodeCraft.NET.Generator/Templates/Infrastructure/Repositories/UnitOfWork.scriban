// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "System.Collections",
    "Microsoft.EntityFrameworkCore",
    "Microsoft.Extensions.DependencyInjection",
    CrossProjectName + ".Domain",
    ApplicationProjectName + ".Contracts.Persistence",
    ApplicationProjectName + ".Contracts.Persistence.Repositories",
    InfrastructureProjectName + ".Persistence.Repositories",
    ApplicationProjectName + ".Contracts.Persistence.Base"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ InfrastructureProjectName }}.Persistence;

public partial class {{ UnitOfWorkImplementationName }} : {{ UnitOfWorkInterfaceName }}
{
    private Hashtable _repositories;
    private readonly ApplicationDbContext _context;
    private readonly IServiceProvider _serviceProvider;

    public {{ UnitOfWorkImplementationName }}(ApplicationDbContext context, IServiceProvider serviceProvider)
    {
        _context = context;
        _serviceProvider = serviceProvider;
    }

    {{~ for entity in entities ~}}
    private I{{ entity.Name }}Repository _{{ entity.Name }}Repository { get; set; }
    public I{{ entity.Name }}Repository {{ entity.Name }}Repository => _{{ entity.Name }}Repository ??= new {{ entity.Name }}Repository(_context);
    {{~ end ~}}

	public async Task<int> Complete()
    {
        try
        {
            return await _context.SaveChangesAsync();
        }
		catch (DbUpdateException ex)
		{
			throw new Exception("Error saving changes to the database", ex);
		}
		catch (Exception ex)
        {
			throw new Exception("Unexpected error when running UnitOfWork", ex);
		}
	}

    public void Dispose()
    {
        _context.Dispose();
    }

    public IAsyncRepository<TEntity> Repository<TEntity>() where TEntity : BaseDomainModel
    {
        return _serviceProvider.GetRequiredService<IAsyncRepository<TEntity>>();
    }
}
