// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.Configuration;

namespace {{ InfrastructureProjectName }}.Persistence.Factories
{
    public class ApplicationDbContextFactory : IDesignTimeDbContextFactory<ApplicationDbContext>
    {
        public ApplicationDbContext CreateDbContext(string[] args)
        {
            var basePath = Directory.GetCurrentDirectory();
            
            var configPaths = new[]
            {
                Path.Combine(basePath, "appsettings.json"),
                Path.Combine(basePath, "../{{ ServerProjectName }}/appsettings.json"),
                Path.Combine(basePath, "..", "{{ ServerProjectName }}", "appsettings.json"),
                Path.Combine(Directory.GetCurrentDirectory(), "..", "{{ ServerProjectName }}", "appsettings.json")
            };

            var configPath = configPaths.FirstOrDefault(File.Exists);
            
            var configBuilder = new ConfigurationBuilder()
                .SetBasePath(basePath)
                .AddEnvironmentVariables();
                
            if (!string.IsNullOrEmpty(configPath))
            {
                configBuilder.AddJsonFile(configPath, optional: true);
            }
            
            var configuration = configBuilder.Build();

            var connectionString = 
                configuration["ConnectionStrings:Default"] ??
                configuration["ConnectionStrings:Application"] ??
                configuration["DEFAULT_CONNECTION_STRING"] ??
                configuration["APPLICATION_CONNECTION_STRING"];

            if (string.IsNullOrWhiteSpace(connectionString))
            {
                connectionString = "Server=(localdb)\\mssqllocaldb;Database=CodeCraftDb;Trusted_Connection=true;MultipleActiveResultSets=true;";
            }

            var optionsBuilder = new DbContextOptionsBuilder<ApplicationDbContext>();
            optionsBuilder.UseSqlServer(connectionString);

            return new ApplicationDbContext(optionsBuilder.Options);
        }
    }
}