// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    ApplicationProjectName + ".Contracts.Persistence",
    ApplicationProjectName + ".Contracts.Persistence.Base",
    InfrastructureProjectName + ".Persistence",
    InfrastructureProjectName + ".Persistence.Seeders",
    "Microsoft.EntityFrameworkCore",
    "Microsoft.Extensions.Configuration",
    "Microsoft.Extensions.DependencyInjection",
    "Microsoft.Extensions.DependencyInjection.Extensions"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}
namespace {{ InfrastructureProjectName }}
{
    public static partial class InfrastructureServiceRegistration
    {
        public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration, string appConnection)
        {
            AddDbContext(services, appConnection);
            AddRepositories(services);
            AddSeeders(services);
            AddCustomServices(services);

            return services;
        }

        public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, string connectionString)
        {
            AddDbContext(services, connectionString);
            AddRepositories(services);
            AddSeeders(services);
            AddCustomServices(services);

            return services;
        }

        private static void AddRepositories(IServiceCollection services)
        {
            // Register generic adapter
            services.AddScoped(typeof(IAsyncRepository<>), typeof(AsyncRepositoryAdapter<>));
            services.AddScoped<{{ UnitOfWorkInterfaceName }}, {{ UnitOfWorkImplementationName }}>();

            // Automatically register all repositories in the target namespace
            var assembly = typeof(RepositoryBase<,>).Assembly;

            var repositoryTypes = assembly.GetTypes()
                .Where(t =>
                    t.IsClass &&
                    !t.IsAbstract &&
                    t.Name.EndsWith("Repository") &&
                    !t.Name.StartsWith("<") &&
                    t.Namespace != null &&
                    t.Namespace.EndsWith(".Persistence.Repositories"))
                .ToList();

            foreach (var implementationType in repositoryTypes)
            {
                var interfaceType = implementationType.GetInterfaces().FirstOrDefault(i =>
                    i.Namespace != null &&
                    i.Namespace.StartsWith("{{ ApplicationProjectName }}.Contracts.Persistence.Repositories"));

                if (interfaceType != null)
                {
                    services.TryAddScoped(interfaceType, implementationType);
                }
            }
        }

        private static void AddSeeders(IServiceCollection services)
        {
            // Register database initializer for migrations and seeding
            services.AddScoped<DbInitializer>();
        }

        private static void AddDbContext(IServiceCollection services, string connectionString)
        {
            services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlite(
                    connectionString,
                    x => x.MigrationsAssembly(typeof(ApplicationDbContext).Assembly.FullName)
                )
            );
        }

        // This method is implemented in the custom partial class
        static partial void AddCustomServices(IServiceCollection services);
    }
}