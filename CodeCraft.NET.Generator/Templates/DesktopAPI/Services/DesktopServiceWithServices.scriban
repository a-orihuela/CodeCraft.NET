// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "CodeCraft.NET.Services.Services",
    "CodeCraft.NET.Services.Models",
    ApplicationProjectName + ".DTOs." + NamePlural,
    ApplicationProjectName + ".DTOs.Custom." + NamePlural,
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Create",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Update"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ DesktopProjectName }}.Services
{
    /// <summary>
    /// Desktop API facade for {{ Name }} operations.
    /// Provides direct access to business logic for MAUI/Desktop applications.
    /// </summary>
    public partial class {{ Name }}DesktopService
    {
        private readonly {{ Name }}Service _{{ name }}Service;

        public {{ Name }}DesktopService({{ Name }}Service {{ name }}Service)
        {
            _{{ name }}Service = {{ name }}Service;
        }

        /// <summary>
        /// Creates a new {{ Name }} entity
        /// </summary>
        /// <param name="command">Create command with entity data</param>
        /// <returns>Result containing the new entity ID or error message</returns>
        public async Task<ServiceResult<int>> CreateAsync({{ Name }}Create command)
        {
            return await _{{ name }}Service.CreateAsync(command);
        }

        /// <summary>
        /// Updates an existing {{ Name }} entity
        /// </summary>
        /// <param name="command">Update command with entity data</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> UpdateAsync({{ Name }}Update command)
        {
            return await _{{ name }}Service.UpdateAsync(command);
        }

        /// <summary>
        /// Deletes a {{ Name }} entity by ID
        /// </summary>
        /// <param name="id">Entity ID to delete</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> DeleteAsync(int id)
        {
            return await _{{ name }}Service.DeleteAsync(id);
        }

        /// <summary>
        /// Gets a {{ Name }} entity by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve</param>
        /// <returns>Result containing the entity or error message</returns>
        public async Task<ServiceResult<{{ Name }}Dto?>> GetByIdAsync(int id)
        {
            return await _{{ name }}Service.GetByIdAsync(id);
        }

        /// <summary>
        /// Gets a {{ Name }} entity with related data by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve with relationships</param>
        /// <returns>Result containing the entity with related data or error message</returns>
        public async Task<ServiceResult<{{ Name }}WithRelatedDto?>> GetWithRelatedAsync(int id)
        {
            return await _{{ name }}Service.GetWithRelatedAsync(id);
        }

        /// <summary>
        /// Gets all {{ NamePlural }} entities
        /// </summary>
        /// <returns>Result containing collection of entities or error message</returns>
        public async Task<ServiceResult<IEnumerable<{{ Name }}Dto>>> GetAllAsync()
        {
            return await _{{ name }}Service.GetAllAsync();
        }
    }
}