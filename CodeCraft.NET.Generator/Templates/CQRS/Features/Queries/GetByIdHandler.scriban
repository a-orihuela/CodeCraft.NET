// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using MediatR;
using {{ ApplicationProjectName }}.Contracts.Persistence.Repositories;
using {{ DomainProjectName }}.Model;
using {{ ApplicationProjectName }}.Middleware.Exceptions;

namespace {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Queries.Get{{ Name }}ById
{
	public partial class Get{{ Name }}ByIdHandler : IRequestHandler<Get{{ Name }}ByIdQuery, {{ Name }}>
	{
		private readonly I{{ Name }}Repository _repository;

		public Get{{ Name }}ByIdHandler(I{{ Name }}Repository repository)
		{
			_repository = repository;
		}

		public async Task<{{ Name }}> Handle(Get{{ Name }}ByIdQuery request, CancellationToken cancellationToken)
		{
			var config = await _repository.GetByIdAsync(request.Id);
			if (config == null)
				throw new NotFoundException(nameof({{ Name }}), request.Id);

			return config;
		}
	}
}
