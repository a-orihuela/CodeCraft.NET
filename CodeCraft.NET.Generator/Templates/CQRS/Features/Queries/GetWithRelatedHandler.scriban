// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using MediatR;
using {{ DomainProjectName }}.Model;
using {{ ApplicationProjectName }}.Contracts.Persistence.Repositories;
using {{ ApplicationProjectName }}.CQRS.Specifications.{{ NamePlural }};
using System.Threading;
using System.Threading.Tasks;

namespace {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Queries.Get{{ Name }}WithRelated;

public class Get{{ Name }}WithRelatedHandler : IRequestHandler<Get{{ Name }}WithRelatedQuery, {{ Name }}>
{
    private readonly I{{ Name }}Repository _repository;

    public Get{{ Name }}WithRelatedHandler(I{{ Name }}Repository repository)
    {
        _repository = repository;
    }

    public async Task<{{ Name }}> Handle(Get{{ Name }}WithRelatedQuery request, CancellationToken cancellationToken)
    {
        var spec = new {{ Name }}WithRelatedSpecification(new {{ Name }}SpecificationParams { Id = request.Id });
        var entity = await _repository.GetByIdWithSpecifications(spec);
        return entity;
    }
}