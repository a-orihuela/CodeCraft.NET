// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using MediatR;
using AutoMapper;
using {{ ApplicationProjectName }}.DTOs.Custom.{{ NamePlural }};
using {{ DomainProjectName }}.Model;
using {{ ApplicationProjectName }}.Contracts.Persistence.Repositories;
using {{ ApplicationProjectName }}.CQRS.Specifications.{{ NamePlural }};

namespace {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Queries.Get{{ Name }}WithRelated
{
	public class Get{{ Name }}WithRelatedHandler : IRequestHandler<Get{{ Name }}WithRelatedQuery, {{ Name }}WithRelatedDto?>
	{
		private readonly I{{ Name }}Repository _repository;
		private readonly IMapper _mapper;

		public Get{{ Name }}WithRelatedHandler(I{{ Name }}Repository repository, IMapper mapper)
		{
			_repository = repository;
			_mapper = mapper;
		}

		public async Task<{{ Name }}WithRelatedDto?> Handle(Get{{ Name }}WithRelatedQuery request, CancellationToken cancellationToken)
		{
			var spec = new {{ Name }}WithRelatedSpecification(new {{ Name }}SpecificationParams { Id = request.Id });
			var entity = await _repository.GetByIdWithSpecifications(spec);
			if (entity == null)
				return null;

			return _mapper.Map<{{ Name }}WithRelatedDto>(entity);
		}
	}
}