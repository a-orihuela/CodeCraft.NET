// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.VisualStudio.TestTools.UnitTesting",
    "FluentAssertions",
    "Moq",
    "MediatR",
    "Microsoft.Extensions.Logging",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Create",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Update",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Delete",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Queries.Get" + Name + "ById",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Queries.Get" + Name + "WithRelated",
    ApplicationProjectName + ".DTOs." + NamePlural,
    ApplicationProjectName + ".DTOs.Custom." + NamePlural,
    ServicesProjectName + ".Services",
    ServicesProjectName + ".Models"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ TestServicesProjectName }}.Services
{
    [TestClass]
    public class {{ Name }}ServiceTests
    {
        private Mock<IMediator> _mediatorMock = null!;
        private Mock<ILogger<{{ Name }}Service>> _loggerMock = null!;
        private {{ Name }}Service _service = null!;

        [TestInitialize]
        public void Setup()
        {
            _mediatorMock = new Mock<IMediator>();
            _loggerMock = new Mock<ILogger<{{ Name }}Service>>();
            _service = new {{ Name }}Service(_mediatorMock.Object, _loggerMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _mediatorMock.Reset();
            _loggerMock.Reset();
        }

        #region CreateAsync Tests

        [TestMethod]
        public async Task CreateAsync_ValidCommand_ReturnsSuccessResult()
        {
            // Arrange
            var command = CreateValid{{ Name }}CreateCommand();
            var expectedId = 123;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedId);

            // Act
            var result = await _service.CreateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().Be(expectedId);
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task CreateAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var command = CreateValid{{ Name }}CreateCommand();
            var exception = new Exception("Database connection failed");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.CreateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().Be(0);
            result.ErrorMessage.Should().Contain("Failed to create {{ Name }}");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region UpdateAsync Tests

        [TestMethod]
        public async Task UpdateAsync_ValidCommand_ReturnsSuccessResult()
        {
            // Arrange
            var command = CreateValid{{ Name }}UpdateCommand();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(true);

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().BeTrue();
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task UpdateAsync_MediatorReturnsFalse_ReturnsSuccessResult()
        {
            // Arrange
            var command = CreateValid{{ Name }}UpdateCommand();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(false);

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue(); // BaseEntityService always returns Success if no exception
            result.Data.Should().BeFalse(); // But Data contains the actual boolean result

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task UpdateAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var command = CreateValid{{ Name }}UpdateCommand();
            var exception = new Exception("Validation failed");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeFalse();
            result.ErrorMessage.Should().Contain("Failed to update {{ Name }}");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region DeleteAsync Tests

        [TestMethod]
        public async Task DeleteAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 123;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(true);

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().BeTrue();
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task DeleteAsync_InvalidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(false);

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue(); // BaseEntityService returns Success even when delete returns false
            result.Data.Should().BeFalse(); // But Data contains the actual boolean result

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task DeleteAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var id = 123;
            var exception = new Exception("Entity not found");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeFalse();
            result.ErrorMessage.Should().Contain("Failed to delete {{ Name }}");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region GetByIdAsync Tests

        [TestMethod]
        public async Task GetByIdAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 123;
            var expectedDto = CreateValid{{ Name }}Dto();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedDto);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().NotBeNull();
            result.Data.Should().BeEquivalentTo(expectedDto);
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task GetByIdAsync_EntityNotFound_ReturnsFailureResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(null);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("{{ Name }} with ID 999 not found");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task GetByIdAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var id = 123;
            var exception = new Exception("Database error");

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ThrowsAsync(exception);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("Failed to get {{ Name }}");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region GetWithRelatedAsync Tests

        [TestMethod]
        public async Task GetWithRelatedAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 123;
            var expectedDto = CreateValid{{ Name }}WithRelatedDto();

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(expectedDto);

            // Act
            var result = await _service.GetWithRelatedAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().NotBeNull();
            result.Data.Should().BeEquivalentTo(expectedDto);
            result.ErrorMessage.Should().BeNullOrEmpty();

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        [TestMethod]
        public async Task GetWithRelatedAsync_EntityNotFound_ReturnsFailureResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(null);

            // Act
            var result = await _service.GetWithRelatedAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("{{ Name }} with ID 999 not found");

            _mediatorMock.Verify(x => x.Send(It.IsAny<object>(), It.IsAny<CancellationToken>()), Times.Once);
        }

        #endregion

        #region GetAllAsync Tests

        [TestMethod]
        public async Task GetAllAsync_ReturnsEmptyListByDefault()
        {
            // Arrange - BaseEntityService GetAllAsync always returns empty list as placeholder implementation

            // Act
            var result = await _service.GetAllAsync();

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().NotBeNull();
            result.Data.Should().BeEmpty(); // BaseEntityService always returns empty list
            result.ErrorMessage.Should().BeNullOrEmpty();

            // GetAllAsync doesn't call mediator in the base implementation, so no verification needed
        }

        #endregion

        #region Helper Methods

        private {{ Name }}Create CreateValid{{ Name }}CreateCommand()
        {
            return new {{ Name }}Create
            {
{{~ for property in Properties ~}}
    {{~ if !property.IsNavigation && property.Name != "Id" ~}}
        {{~ if property.TypeName == "string" ~}}
                {{ property.Name }} = "Test{{ property.Name }}",
        {{~ else if property.TypeName == "DateTime" ~}}
                {{ property.Name }} = DateTime.UtcNow,
        {{~ else if property.TypeName == "bool" ~}}
                {{ property.Name }} = true,
        {{~ else if property.TypeName == "int" ~}}
                {{ property.Name }} = 1,
        {{~ else if property.TypeName == "decimal" ~}}
                {{ property.Name }} = 1.0m,
        {{~ else if property.TypeName == "double" ~}}
                {{ property.Name }} = 1.0,
        {{~ else if property.TypeName == "float" ~}}
                {{ property.Name }} = 1.0f,
        {{~ else if property.TypeName == "long" ~}}
                {{ property.Name }} = 1L,
        {{~ end ~}}
    {{~ end ~}}
{{~ end ~}}
            };
        }

        private {{ Name }}Update CreateValid{{ Name }}UpdateCommand()
        {
            return new {{ Name }}Update
            {
                Id = 1,
{{~ for property in Properties ~}}
    {{~ if !property.IsNavigation && property.Name != "Id" ~}}
        {{~ if property.TypeName == "string" ~}}
                {{ property.Name }} = "Test{{ property.Name }}",
        {{~ else if property.TypeName == "DateTime" ~}}
                {{ property.Name }} = DateTime.UtcNow,
        {{~ else if property.TypeName == "bool" ~}}
                {{ property.Name }} = true,
        {{~ else if property.TypeName == "int" ~}}
                {{ property.Name }} = 1,
        {{~ else if property.TypeName == "decimal" ~}}
                {{ property.Name }} = 1.0m,
        {{~ else if property.TypeName == "double" ~}}
                {{ property.Name }} = 1.0,
        {{~ else if property.TypeName == "float" ~}}
                {{ property.Name }} = 1.0f,
        {{~ else if property.TypeName == "long" ~}}
                {{ property.Name }} = 1L,
        {{~ end ~}}
    {{~ end ~}}
{{~ end ~}}
            };
        }

        private {{ Name }}Dto CreateValid{{ Name }}Dto()
        {
            return new {{ Name }}Dto
            {
                Id = 1,
{{~ for property in Properties ~}}
    {{~ if !property.IsNavigation && property.Name != "Id" ~}}
        {{~ if property.TypeName == "string" ~}}
                {{ property.Name }} = "Test{{ property.Name }}",
        {{~ else if property.TypeName == "DateTime" ~}}
                {{ property.Name }} = DateTime.UtcNow,
        {{~ else if property.TypeName == "bool" ~}}
                {{ property.Name }} = true,
        {{~ else if property.TypeName == "int" ~}}
                {{ property.Name }} = 1,
        {{~ else if property.TypeName == "decimal" ~}}
                {{ property.Name }} = 1.0m,
        {{~ else if property.TypeName == "double" ~}}
                {{ property.Name }} = 1.0,
        {{~ else if property.TypeName == "float" ~}}
                {{ property.Name }} = 1.0f,
        {{~ else if property.TypeName == "long" ~}}
                {{ property.Name }} = 1L,
        {{~ else if property.Type == "SystemComponent" ~}}
                {{ property.Name }} = SystemComponent.Application,
        {{~ else if property.Type == "LogLevel" ~}}
                {{ property.Name }} = LogLevel.Info,
        {{~ else if property.Type == "LogDestination" ~}}
                {{ property.Name }} = LogDestination.Database,
        {{~ end ~}}
    {{~ end ~}}
{{~ end ~}}
            };
        }

        private {{ Name }}WithRelatedDto CreateValid{{ Name }}WithRelatedDto()
        {
            return new {{ Name }}WithRelatedDto
            {
                Id = 1,
{{~ for property in Properties ~}}
    {{~ if !property.IsNavigation && property.Name != "Id" ~}}
        {{~ if property.TypeName == "string" ~}}
                {{ property.Name }} = "Test{{ property.Name }}",
        {{~ else if property.TypeName == "DateTime" ~}}
                {{ property.Name }} = DateTime.UtcNow,
        {{~ else if property.TypeName == "bool" ~}}
                {{ property.Name }} = true,
        {{~ else if property.TypeName == "int" ~}}
                {{ property.Name }} = 1,
        {{~ else if property.TypeName == "decimal" ~}}
                {{ property.Name }} = 1.0m,
        {{~ else if property.TypeName == "double" ~}}
                {{ property.Name }} = 1.0,
        {{~ else if property.TypeName == "float" ~}}
                {{ property.Name }} = 1.0f,
        {{~ else if property.TypeName == "long" ~}}
                {{ property.Name }} = 1L,
        {{~ else if property.Type == "SystemComponent" ~}}
                {{ property.Name }} = SystemComponent.Application,
        {{~ else if property.Type == "LogLevel" ~}}
                {{ property.Name }} = LogLevel.Info,
        {{~ else if property.Type == "LogDestination" ~}}
                {{ property.Name }} = LogDestination.Database,
        {{~ end ~}}
    {{~ end ~}}
{{~ end ~}}
                // TODO: Add related entity properties if any
            };
        }

        #endregion
    }
}