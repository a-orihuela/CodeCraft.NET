// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.VisualStudio.TestTools.UnitTesting",
    "FluentAssertions",
    "Microsoft.EntityFrameworkCore",
    DbContextNamespace,
    RepositoryNamespace,
    RepositoryInterfaceNamespace,
    EntityNamespace,
    "DomainSystemComponent = " + DomainProjectName + ".Model.SystemComponent",
    "DomainLogLevel = " + DomainProjectName + ".Model.LogLevel"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ TestInfrastructureProjectName }}.Repositories
{
    [TestClass]
    public class {{ Name }}RepositoryTests
    {
        private ApplicationDbContext _context = null!;
        private I{{ Name }}Repository _repository = null!;

        [TestInitialize]
        public void Setup()
        {
            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            _context = new ApplicationDbContext(options);
            _repository = new {{ Name }}Repository(_context);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _context.Dispose();
        }

        #region GetByIdAsync Tests

        [TestMethod]
        public async Task GetByIdAsync_ExistingEntity_ReturnsEntity()
        {
            // Arrange
            var entity = Create{{ Name }}Entity();

            _context.{{ NamePlural }}.Add(entity);
            await _context.SaveChangesAsync();

            // Act
            var result = await _repository.GetByIdAsync(entity.Id);

            // Assert
            result.Should().NotBeNull();
            result!.Id.Should().Be(entity.Id);
        }

        [TestMethod]
        public async Task GetByIdAsync_NonExistentEntity_ReturnsNull()
        {
            // Arrange
            var nonExistentId = 999;

            // Act
            var result = await _repository.GetByIdAsync(nonExistentId);

            // Assert
            result.Should().BeNull();
        }

        #endregion

        #region GetAllAsync Tests

        [TestMethod]
        public async Task GetAllAsync_EmptyDatabase_ReturnsEmptyList()
        {
            // Act
            var result = await _repository.GetAllAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().BeEmpty();
        }

        [TestMethod]
        public async Task GetAllAsync_WithEntities_ReturnsAllEntities()
        {
            // Arrange
            var entities = new List<{{ Name }}>
            {
                Create{{ Name }}Entity(),
                Create{{ Name }}Entity()
            };

            _context.{{ NamePlural }}.AddRange(entities);
            await _context.SaveChangesAsync();

            // Act
            var result = await _repository.GetAllAsync();

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(2);
        }

        #endregion

        #region AddAsync Tests

        [TestMethod]
        public async Task AddAsync_ValidEntity_AddsEntityToDatabase()
        {
            // Arrange
            var entity = Create{{ Name }}Entity();

            // Act
            var result = await _repository.AddAsync(entity);
            await _context.SaveChangesAsync();

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().BeGreaterThan(0);

            var savedEntity = await _context.{{ NamePlural }}.FindAsync(result.Id);
            savedEntity.Should().NotBeNull();
        }

        #endregion

        #region UpdateAsync Tests

        [TestMethod]
        public async Task UpdateAsync_ExistingEntity_UpdatesEntity()
        {
            // Arrange
            var entity = Create{{ Name }}Entity();

            _context.{{ NamePlural }}.Add(entity);
            await _context.SaveChangesAsync();

            // TODO: Modify entity properties for testing

            // Act
            await _repository.UpdateAsync(entity);
            await _context.SaveChangesAsync();

            // Assert
            var updatedEntity = await _context.{{ NamePlural }}.FindAsync(entity.Id);
            updatedEntity.Should().NotBeNull();
        }

        #endregion

        #region DeleteAsync Tests

        [TestMethod]
        public async Task DeleteAsync_ExistingEntity_RemovesEntity()
        {
            // Arrange
            var entity = Create{{ Name }}Entity();

            _context.{{ NamePlural }}.Add(entity);
            await _context.SaveChangesAsync();

            // Act
            await _repository.DeleteAsync(entity);
            await _context.SaveChangesAsync();

            // Assert
            var deletedEntity = await _context.{{ NamePlural }}.FindAsync(entity.Id);
            deletedEntity.Should().BeNull();
        }

        #endregion

        #region Helper Methods

        private {{ Name }} Create{{ Name }}Entity()
        {
            return new {{ Name }}
            {
                // TODO: Set required properties for {{ Name }}
{{~ for property in Properties ~}}
{{~ if property.Name != "Id" && !property.IsNavigationProperty ~}}
                // {{ property.Name }} = // TODO: Set {{ property.Type }} value
{{~ end ~}}
{{~ end ~}}
            };
        }

        #endregion
    }
}