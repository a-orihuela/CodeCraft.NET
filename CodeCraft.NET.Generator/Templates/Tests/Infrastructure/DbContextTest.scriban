// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using {{ InfrastructureProjectName }}.Persistence;
{{~ for entity in entities ~}}
using {{ DomainProjectName }}.Model;
{{~ end ~}}

namespace {{ TestInfrastructureProjectName }}.Persistence
{
    [TestClass]
    public class DbContextTests
    {
        private ApplicationDbContext _context = null!;

        [TestInitialize]
        public void Setup()
        {
            var options = new DbContextOptionsBuilder<ApplicationDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            _context = new ApplicationDbContext(options);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _context.Dispose();
        }

        #region DbSet Tests

{{~ for entity in entities ~}}
        [TestMethod]
        public void {{ entity.NamePlural }}_DbSet_ShouldNotBeNull()
        {
            // Assert
            _context.{{ entity.NamePlural }}.Should().NotBeNull();
        }

        [TestMethod]
        public void {{ entity.NamePlural }}_DbSet_ShouldBeQueryable()
        {
            // Act & Assert
            var query = _context.{{ entity.NamePlural }}.AsQueryable();
            query.Should().NotBeNull();
        }

{{~ end ~}}
        #endregion

        #region Database Connection Tests

        [TestMethod]
        public async Task Database_CanConnect_ShouldReturnTrue()
        {
            // Act
            var canConnect = await _context.Database.CanConnectAsync();

            // Assert
            canConnect.Should().BeTrue();
        }

        [TestMethod]
        public void Database_IsInMemory_ShouldBeTrue()
        {
            // Act
            var isInMemory = _context.Database.IsInMemory();

            // Assert
            isInMemory.Should().BeTrue();
        }

        #endregion

        #region SaveChanges Tests

        [TestMethod]
        public async Task SaveChangesAsync_WithoutChanges_ShouldReturnZero()
        {
            // Act
            var result = await _context.SaveChangesAsync();

            // Assert
            result.Should().Be(0);
        }

        #endregion

        #region Model Validation Tests

        [TestMethod]
        public void Model_ShouldHaveAllExpectedEntities()
        {
            // Arrange
            var model = _context.Model;
            var expectedEntityTypes = new[]
            {
{{~ for entity in entities ~}}
                typeof({{ entity.Name }}),
{{~ end ~}}
            };

            // Act & Assert
            foreach (var expectedType in expectedEntityTypes)
            {
                var entityType = model.FindEntityType(expectedType);
                entityType.Should().NotBeNull($"Entity type {expectedType.Name} should be configured in the model");
            }
        }

        #endregion
    }
}