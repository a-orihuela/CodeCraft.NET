// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Microsoft.Extensions.Logging;
using MediatR;

namespace CodeCraft.NET.Test.Services
{
    /// <summary>
    /// Base class for service tests providing common setup and utilities
    /// </summary>
    public abstract class BaseServiceTest
    {
        protected Mock<IMediator> MediatorMock { get; private set; } = null!;
        protected Mock<ILogger> LoggerMock { get; private set; } = null!;

        [TestInitialize]
        public virtual void BaseSetup()
        {
            MediatorMock = new Mock<IMediator>();
            LoggerMock = new Mock<ILogger>();
        }

        [TestCleanup]
        public virtual void BaseCleanup()
        {
            MediatorMock?.Reset();
            LoggerMock?.Reset();
        }

        /// <summary>
        /// Creates a typed logger mock for specific service type
        /// </summary>
        protected Mock<ILogger<T>> CreateLoggerMock<T>()
        {
            return new Mock<ILogger<T>>();
        }

        /// <summary>
        /// Verifies that an error was logged
        /// </summary>
        protected void VerifyErrorLogged<T>(Mock<ILogger<T>> loggerMock, string expectedMessage = null!)
        {
            loggerMock.Verify(
                x => x.Log(
                    LogLevel.Error,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => expectedMessage == null || v.ToString()!.Contains(expectedMessage)),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
                Times.AtLeastOnce);
        }

        /// <summary>
        /// Verifies that an information log was written
        /// </summary>
        protected void VerifyInformationLogged<T>(Mock<ILogger<T>> loggerMock, string expectedMessage = null!)
        {
            loggerMock.Verify(
                x => x.Log(
                    LogLevel.Information,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => expectedMessage == null || v.ToString()!.Contains(expectedMessage)),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
                Times.AtLeastOnce);
        }
    }
}