// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.VisualStudio.TestTools.UnitTesting",
    "FluentAssertions",
    "FluentValidation.TestHelper",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Create",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Update",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Validators"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ TestApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Validators
{
    [TestClass]
    public class {{ Name }}ValidatorTests
    {
        private {{ Name }}CreateValidator _createValidator = null!;
        private {{ Name }}UpdateValidator _updateValidator = null!;

        [TestInitialize]
        public void Setup()
        {
            _createValidator = new {{ Name }}CreateValidator();
            _updateValidator = new {{ Name }}UpdateValidator();
        }

        #region Create Validator Tests

        [TestMethod]
        public void CreateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new {{ Name }}Create
            {
{{~ for property in Properties ~}}
    {{~ if !property.IsNavigation && property.Name != "Id" ~}}
        {{~ if property.TypeName == "string" ~}}
                {{ property.Name }} = "Test{{ property.Name }}",
        {{~ else if property.TypeName == "DateTime" ~}}
                {{ property.Name }} = DateTime.UtcNow,
        {{~ else if property.TypeName == "bool" ~}}
                {{ property.Name }} = true,
        {{~ else if property.TypeName == "int" ~}}
                {{ property.Name }} = 1,
        {{~ else if property.TypeName == "decimal" ~}}
                {{ property.Name }} = 1.0m,
        {{~ else if property.TypeName == "double" ~}}
                {{ property.Name }} = 1.0,
        {{~ else if property.TypeName == "float" ~}}
                {{ property.Name }} = 1.0f,
        {{~ else if property.TypeName == "long" ~}}
                {{ property.Name }} = 1L,
        {{~ end ~}}
    {{~ end ~}}
{{~ end ~}}
            };

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void CreateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new {{ Name }}Create();

            // Act & Assert
            var result = _createValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on {{ Name }} entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion

        #region Update Validator Tests

        [TestMethod]
        public void UpdateValidator_ValidCommand_ShouldNotHaveValidationErrors()
        {
            // Arrange
            var command = new {{ Name }}Update
            {
                Id = 1,
{{~ for property in Properties ~}}
    {{~ if !property.IsNavigation && property.Name != "Id" ~}}
        {{~ if property.TypeName == "string" ~}}
                {{ property.Name }} = "Test{{ property.Name }}",
        {{~ else if property.TypeName == "DateTime" ~}}
                {{ property.Name }} = DateTime.UtcNow,
        {{~ else if property.TypeName == "bool" ~}}
                {{ property.Name }} = true,
        {{~ else if property.TypeName == "int" ~}}
                {{ property.Name }} = 1,
        {{~ else if property.TypeName == "decimal" ~}}
                {{ property.Name }} = 1.0m,
        {{~ else if property.TypeName == "double" ~}}
                {{ property.Name }} = 1.0,
        {{~ else if property.TypeName == "float" ~}}
                {{ property.Name }} = 1.0f,
        {{~ else if property.TypeName == "long" ~}}
                {{ property.Name }} = 1L,
        {{~ end ~}}
    {{~ end ~}}
{{~ end ~}}
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldNotHaveAnyValidationErrors();
        }

        [TestMethod]
        public void UpdateValidator_InvalidId_ShouldHaveValidationError()
        {
            // Arrange
            var command = new {{ Name }}Update
            {
                Id = 0, // Invalid ID
{{~ for property in Properties ~}}
    {{~ if !property.IsNavigation && property.Name != "Id" ~}}
        {{~ if property.TypeName == "string" ~}}
                {{ property.Name }} = "Test{{ property.Name }}",
        {{~ else if property.TypeName == "DateTime" ~}}
                {{ property.Name }} = DateTime.UtcNow,
        {{~ else if property.TypeName == "bool" ~}}
                {{ property.Name }} = true,
        {{~ else if property.TypeName == "int" ~}}
                {{ property.Name }} = 1,
        {{~ else if property.TypeName == "decimal" ~}}
                {{ property.Name }} = 1.0m,
        {{~ else if property.TypeName == "double" ~}}
                {{ property.Name }} = 1.0,
        {{~ else if property.TypeName == "float" ~}}
                {{ property.Name }} = 1.0f,
        {{~ else if property.TypeName == "long" ~}}
                {{ property.Name }} = 1L,
        {{~ end ~}}
    {{~ end ~}}
{{~ end ~}}
            };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            result.ShouldHaveValidationErrorFor(x => x.Id);
        }

        [TestMethod]
        public void UpdateValidator_EmptyRequiredFields_ShouldHaveValidationErrors()
        {
            // Arrange
            var command = new {{ Name }}Update { Id = 1 };

            // Act & Assert
            var result = _updateValidator.TestValidate(command);
            
            // TODO: Add specific validation assertions based on {{ Name }} entity requirements
            // Example:
            // result.ShouldHaveValidationErrorFor(x => x.PropertyName);
        }

        #endregion
    }
}