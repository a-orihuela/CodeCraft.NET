// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.VisualStudio.TestTools.UnitTesting",
    "FluentAssertions",
    "Moq",
    "AutoMapper",
    "Microsoft.Extensions.Logging",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Update",
    ApplicationProjectName + ".Contracts.Persistence.Repositories",
    ApplicationProjectName + ".Contracts.Persistence",
    ApplicationProjectName + ".Middleware.Exceptions",
    DomainProjectName + ".Model"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ TestApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Commands.Update
{
    [TestClass]
    public class {{ Name }}UpdateHandlerTests
    {
        private Mock<I{{ Name }}Repository> _repositoryMock = null!;
        private Mock<ICodeCraftUnitOfWork> _unitOfWorkMock = null!;
        private Mock<IMapper> _mapperMock = null!;
        private Mock<ILogger<{{ Name }}UpdateHandler>> _loggerMock = null!;
        private {{ Name }}UpdateHandler _handler = null!;

        [TestInitialize]
        public void Setup()
        {
            _repositoryMock = new Mock<I{{ Name }}Repository>();
            _unitOfWorkMock = new Mock<ICodeCraftUnitOfWork>();
            _mapperMock = new Mock<IMapper>();
            _loggerMock = new Mock<ILogger<{{ Name }}UpdateHandler>>();

            // Setup specific repository property
            _unitOfWorkMock.Setup(x => x.{{ Name }}Repository)
                .Returns(_repositoryMock.Object);

            // Setup generic Repository<T>() method for base handler compatibility
            _unitOfWorkMock.Setup(x => x.Repository<{{ Name }}>())
                .Returns(_repositoryMock.Object);

            _handler = new {{ Name }}UpdateHandler(_unitOfWorkMock.Object, _mapperMock.Object, _loggerMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _repositoryMock.Reset();
            _unitOfWorkMock.Reset();
            _mapperMock.Reset();
            _loggerMock.Reset();
        }

        [TestMethod]
        public async Task Handle_ValidCommand_UpdatesEntityAndReturnsTrue()
        {
            // Arrange
            var command = new {{ Name }}Update
            {
                Id = 1
                // TODO: Set test properties based on {{ Name }} entity
            };

            var existingEntity = new {{ Name }}
            {
                Id = 1
                // TODO: Set test properties based on {{ Name }} entity  
            };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync(existingEntity);

            _mapperMock.Setup(x => x.Map(command, existingEntity, command.GetType(), typeof({{ Name }})))
                .Returns(existingEntity);

            // The base handler uses UpdateEntity() not UpdateAsync()
            _repositoryMock.Setup(x => x.UpdateEntity(It.IsAny<{{ Name }}>()));

            _unitOfWorkMock.Setup(x => x.Complete())
                .ReturnsAsync(1);

            // Act
            var result = await _handler.Handle(command, CancellationToken.None);

            // Assert
            result.Should().BeTrue();

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _mapperMock.Verify(x => x.Map(command, existingEntity, command.GetType(), typeof({{ Name }})), Times.Once);
            _repositoryMock.Verify(x => x.UpdateEntity(It.IsAny<{{ Name }}>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Once);
        }

        [TestMethod]
        public async Task Handle_EntityNotFound_ThrowsNotFoundException()
        {
            // Arrange
            var command = new {{ Name }}Update { Id = 999 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync(({{ Name }}?)null);

            // Act & Assert
            await Assert.ThrowsExceptionAsync<NotFoundException>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _mapperMock.Verify(x => x.Map(It.IsAny<{{ Name }}Update>(), It.IsAny<{{ Name }}>(), It.IsAny<Type>(), It.IsAny<Type>()), Times.Never);
            _repositoryMock.Verify(x => x.UpdateEntity(It.IsAny<{{ Name }}>()), Times.Never);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Never);
        }

        [TestMethod]
        public async Task Handle_RepositoryGetByIdThrowsException_PropagatesException()
        {
            // Arrange
            var command = new {{ Name }}Update { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ThrowsAsync(new Exception("Database error"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
        }

        [TestMethod]
        public async Task Handle_RepositoryUpdateThrowsException_PropagatesException()
        {
            // Arrange
            var command = new {{ Name }}Update { Id = 1 };
            var existingEntity = new {{ Name }} { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync(existingEntity);

            _mapperMock.Setup(x => x.Map(command, existingEntity, command.GetType(), typeof({{ Name }})))
                .Returns(existingEntity);

            _repositoryMock.Setup(x => x.UpdateEntity(It.IsAny<{{ Name }}>()))
                .Throws(new Exception("Update failed"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _repositoryMock.Verify(x => x.UpdateEntity(It.IsAny<{{ Name }}>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Never);
        }

        [TestMethod]
        public async Task Handle_CompleteReturnsZero_ThrowsException()
        {
            // Arrange
            var command = new {{ Name }}Update { Id = 1 };
            var existingEntity = new {{ Name }} { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdAsync(command.Id))
                .ReturnsAsync(existingEntity);

            _mapperMock.Setup(x => x.Map(command, existingEntity, command.GetType(), typeof({{ Name }})))
                .Returns(existingEntity);

            _repositoryMock.Setup(x => x.UpdateEntity(It.IsAny<{{ Name }}>()));

            _unitOfWorkMock.Setup(x => x.Complete())
                .ReturnsAsync(0); // No rows affected - handler should throw exception

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdAsync(command.Id), Times.Once);
            _repositoryMock.Verify(x => x.UpdateEntity(It.IsAny<{{ Name }}>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.Complete(), Times.Once);
        }
    }
}