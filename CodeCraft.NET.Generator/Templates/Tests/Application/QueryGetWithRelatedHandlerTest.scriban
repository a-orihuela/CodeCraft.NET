// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.VisualStudio.TestTools.UnitTesting",
    "FluentAssertions",
    "Moq",
    "AutoMapper",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Queries.Get" + Name + "WithRelated",
    ApplicationProjectName + ".Contracts.Persistence.Repositories",
    ApplicationProjectName + ".DTOs.Custom." + NamePlural,
    ApplicationProjectName + ".CQRS.Base.Specifications",
    DomainProjectName + ".Model"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ TestApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Queries
{
    [TestClass]
    public class Get{{ Name }}WithRelatedHandlerTests
    {
        private Mock<I{{ Name }}Repository> _repositoryMock = null!;
        private Mock<IMapper> _mapperMock = null!;
        private Get{{ Name }}WithRelatedHandler _handler = null!;

        [TestInitialize]
        public void Setup()
        {
            _repositoryMock = new Mock<I{{ Name }}Repository>();
            _mapperMock = new Mock<IMapper>();

            _handler = new Get{{ Name }}WithRelatedHandler(_repositoryMock.Object, _mapperMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _repositoryMock.Reset();
            _mapperMock.Reset();
        }

        [TestMethod]
        public async Task Handle_ExistingEntity_ReturnsWithRelatedDto()
        {
            // Arrange
            var query = new Get{{ Name }}WithRelatedQuery { Id = 1 };
            var entity = new {{ Name }} { Id = 1 };
            var dto = new {{ Name }}WithRelatedDto { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()))
                .ReturnsAsync(entity);

            _mapperMock.Setup(x => x.Map<{{ Name }}WithRelatedDto>(entity))
                .Returns(dto);

            // Act
            var result = await _handler.Handle(query, CancellationToken.None);

            // Assert
            result.Should().NotBeNull();
            result.Should().BeEquivalentTo(dto);

            _repositoryMock.Verify(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()), Times.Once);
            _mapperMock.Verify(x => x.Map<{{ Name }}WithRelatedDto>(entity), Times.Once);
        }

        [TestMethod]
        public async Task Handle_NonExistentEntity_ReturnsNull()
        {
            // Arrange
            var query = new Get{{ Name }}WithRelatedQuery { Id = 999 };

            _repositoryMock.Setup(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()))
                .ReturnsAsync(({{ Name }}?)null);

            // Act
            var result = await _handler.Handle(query, CancellationToken.None);

            // Assert
            result.Should().BeNull();

            _repositoryMock.Verify(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()), Times.Once);
            _mapperMock.Verify(x => x.Map<{{ Name }}WithRelatedDto>(It.IsAny<{{ Name }}>()), Times.Never);
        }

        [TestMethod]
        public async Task Handle_RepositoryThrowsException_PropagatesException()
        {
            // Arrange
            var query = new Get{{ Name }}WithRelatedQuery { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()))
                .ThrowsAsync(new Exception("Database error"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(query, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()), Times.Once);
        }

        [TestMethod]
        public async Task Handle_MappingThrowsException_PropagatesException()
        {
            // Arrange
            var query = new Get{{ Name }}WithRelatedQuery { Id = 1 };
            var entity = new {{ Name }} { Id = 1 };

            _repositoryMock.Setup(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()))
                .ReturnsAsync(entity);

            _mapperMock.Setup(x => x.Map<{{ Name }}WithRelatedDto>(entity))
                .Throws(new Exception("Mapping failed"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(query, CancellationToken.None));

            _repositoryMock.Verify(x => x.GetByIdWithSpecifications(It.IsAny<ISpecification<{{ Name }}>>()), Times.Once);
            _mapperMock.Verify(x => x.Map<{{ Name }}WithRelatedDto>(entity), Times.Once);
        }
    }
}