// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.VisualStudio.TestTools.UnitTesting",
    "FluentAssertions",
    "Moq",
    "AutoMapper",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Create",
    ApplicationProjectName + ".Contracts.Persistence.Repositories",
    ApplicationProjectName + ".Contracts.Persistence",
    DomainProjectName + ".Model"
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ TestApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Commands.Create
{
    [TestClass]
    public class {{ Name }}CreateHandlerTests
    {
        private Mock<I{{ Name }}Repository> _repositoryMock;
        private Mock<ICodeCraftUnitOfWork> _unitOfWorkMock;
        private Mock<IMapper> _mapperMock;
        private {{ Name }}CreateHandler _handler;

        [TestInitialize]
        public void Setup()
        {
            _repositoryMock = new Mock<I{{ Name }}Repository>();
            _unitOfWorkMock = new Mock<ICodeCraftUnitOfWork>();
            _mapperMock = new Mock<IMapper>();

            _unitOfWorkMock.Setup(x => x.{{ Name }}Repository)
                .Returns(_repositoryMock.Object);

            _handler = new {{ Name }}CreateHandler(_unitOfWorkMock.Object, _mapperMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _repositoryMock.Reset();
            _unitOfWorkMock.Reset();
            _mapperMock.Reset();
        }

        [TestMethod]
        public async Task Handle_ValidCommand_CreatesEntityAndReturnsId()
        {
            // Arrange
            var command = new {{ Name }}Create
            {
                // TODO: Add test data properties
            };

            var entity = new {{ Name }}
            {
                Id = 1
                // TODO: Add test data properties  
            };

            _mapperMock.Setup(x => x.Map<{{ Name }}>(command))
                .Returns(entity);

            _repositoryMock.Setup(x => x.AddAsync(It.IsAny<{{ Name }}>()))
                .ReturnsAsync(entity);

            _unitOfWorkMock.Setup(x => x.SaveAsync())
                .ReturnsAsync(1);

            // Act
            var result = await _handler.Handle(command, CancellationToken.None);

            // Assert
            result.Should().Be(entity.Id);

            _mapperMock.Verify(x => x.Map<{{ Name }}>(command), Times.Once);
            _repositoryMock.Verify(x => x.AddAsync(It.IsAny<{{ Name }}>()), Times.Once);
            _unitOfWorkMock.Verify(x => x.SaveAsync(), Times.Once);
        }

        [TestMethod]
        public async Task Handle_RepositoryThrowsException_PropagatesException()
        {
            // Arrange
            var command = new {{ Name }}Create();
            var entity = new {{ Name }}();

            _mapperMock.Setup(x => x.Map<{{ Name }}>(command))
                .Returns(entity);

            _repositoryMock.Setup(x => x.AddAsync(It.IsAny<{{ Name }}>()))
                .ThrowsAsync(new Exception("Database error"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));
        }

        [TestMethod]
        public async Task Handle_SaveAsyncFails_PropagatesException()
        {
            // Arrange
            var command = new {{ Name }}Create();
            var entity = new {{ Name }} { Id = 1 };

            _mapperMock.Setup(x => x.Map<{{ Name }}>(command))
                .Returns(entity);

            _repositoryMock.Setup(x => x.AddAsync(It.IsAny<{{ Name }}>()))
                .ReturnsAsync(entity);

            _unitOfWorkMock.Setup(x => x.SaveAsync())
                .ThrowsAsync(new Exception("Save failed"));

            // Act & Assert
            await Assert.ThrowsExceptionAsync<Exception>(() => 
                _handler.Handle(command, CancellationToken.None));
        }
    }
}