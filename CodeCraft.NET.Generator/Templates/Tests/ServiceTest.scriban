// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

{{~ usings = [
    "Microsoft.VisualStudio.TestTools.UnitTesting",
    "FluentAssertions",
    "Moq",
    "Microsoft.Extensions.Logging",
    "MediatR",
    ServicesProjectName + ".Services",
    ServicesProjectName + ".Models",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Create",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Update",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Commands.Delete",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Queries.Get" + Name + "ById",
    ApplicationProjectName + ".CQRS.Features." + NamePlural + ".Queries.Get" + Name + "WithRelated",
    ApplicationProjectName + ".DTOs." + NamePlural,
    ApplicationProjectName + ".DTOs.Custom." + NamePlural
] ~}}
{{~ include "CodeCraft.NET.Generator.Templates.Partials._render_usings.scriban" ~}}

namespace {{ TestServicesProjectName }}.Services
{
    [TestClass]
    public class {{ Name }}ServiceTests
    {
        private Mock<IMediator> _mediatorMock;
        private Mock<ILogger<{{ Name }}Service>> _loggerMock;
        private {{ Name }}Service _service;

        [TestInitialize]
        public void Setup()
        {
            _mediatorMock = new Mock<IMediator>();
            _loggerMock = new Mock<ILogger<{{ Name }}Service>>();
            _service = new {{ Name }}Service(_mediatorMock.Object, _loggerMock.Object);
        }

        [TestCleanup]
        public void Cleanup()
        {
            _mediatorMock.Reset();
            _loggerMock.Reset();
        }

        #region CreateAsync Tests

        [TestMethod]
        public async Task CreateAsync_ValidCommand_ReturnsSuccessResult()
        {
            // Arrange
            var command = new {{ Name }}Create
            {
                // TODO: Add test data properties
            };
            var expectedId = 1;

            _mediatorMock.Setup(x => x.Send(command, default))
                .ReturnsAsync(expectedId);

            // Act
            var result = await _service.CreateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().Be(expectedId);
            result.ErrorMessage.Should().BeNull();
            result.ValidationErrors.Should().BeEmpty();

            _mediatorMock.Verify(x => x.Send(command, default), Times.Once);
        }

        [TestMethod]
        public async Task CreateAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var command = new {{ Name }}Create();
            var exceptionMessage = "Database error";

            _mediatorMock.Setup(x => x.Send(command, default))
                .ThrowsAsync(new Exception(exceptionMessage));

            // Act
            var result = await _service.CreateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().Be(0);
            result.ErrorMessage.Should().Contain("Failed to create {{ Name }}");
            result.ErrorMessage.Should().Contain(exceptionMessage);
        }

        #endregion

        #region UpdateAsync Tests

        [TestMethod]
        public async Task UpdateAsync_ValidCommand_ReturnsSuccessResult()
        {
            // Arrange
            var command = new {{ Name }}Update
            {
                Id = 1
                // TODO: Add test data properties
            };

            _mediatorMock.Setup(x => x.Send(command, default))
                .ReturnsAsync(true);

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().BeTrue();
            result.ErrorMessage.Should().BeNull();

            _mediatorMock.Verify(x => x.Send(command, default), Times.Once);
        }

        [TestMethod]
        public async Task UpdateAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var command = new {{ Name }}Update();
            var exceptionMessage = "Update failed";

            _mediatorMock.Setup(x => x.Send(command, default))
                .ThrowsAsync(new Exception(exceptionMessage));

            // Act
            var result = await _service.UpdateAsync(command);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeFalse();
            result.ErrorMessage.Should().Contain("Failed to update {{ Name }}");
            result.ErrorMessage.Should().Contain(exceptionMessage);
        }

        #endregion

        #region DeleteAsync Tests

        [TestMethod]
        public async Task DeleteAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 1;

            _mediatorMock.Setup(x => x.Send(It.IsAny<{{ Name }}Delete>(), default))
                .ReturnsAsync(true);

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().BeTrue();
            result.ErrorMessage.Should().BeNull();

            _mediatorMock.Verify(x => x.Send(It.Is<{{ Name }}Delete>(d => d.Id == id), default), Times.Once);
        }

        [TestMethod]
        public async Task DeleteAsync_MediatorThrowsException_ReturnsFailureResult()
        {
            // Arrange
            var id = 1;
            var exceptionMessage = "Delete failed";

            _mediatorMock.Setup(x => x.Send(It.IsAny<{{ Name }}Delete>(), default))
                .ThrowsAsync(new Exception(exceptionMessage));

            // Act
            var result = await _service.DeleteAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeFalse();
            result.ErrorMessage.Should().Contain("Failed to delete {{ Name }}");
            result.ErrorMessage.Should().Contain(exceptionMessage);
        }

        #endregion

        #region GetByIdAsync Tests

        [TestMethod]
        public async Task GetByIdAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 1;
            var expectedDto = new {{ Name }}Dto 
            { 
                Id = id
                // TODO: Add test data properties
            };

            _mediatorMock.Setup(x => x.Send(It.IsAny<Get{{ Name }}ByIdQuery>(), default))
                .ReturnsAsync(expectedDto);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().Be(expectedDto);
            result.ErrorMessage.Should().BeNull();

            _mediatorMock.Verify(x => x.Send(It.Is<Get{{ Name }}ByIdQuery>(q => q.Id == id), default), Times.Once);
        }

        [TestMethod]
        public async Task GetByIdAsync_EntityNotFound_ReturnsFailureResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<Get{{ Name }}ByIdQuery>(), default))
                .ReturnsAsync(({{ Name }}Dto?)null);

            // Act
            var result = await _service.GetByIdAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("{{ Name }} with ID 999 not found");
        }

        #endregion

        #region GetWithRelatedAsync Tests

        [TestMethod]
        public async Task GetWithRelatedAsync_ValidId_ReturnsSuccessResult()
        {
            // Arrange
            var id = 1;
            var expectedDto = new {{ Name }}WithRelatedDto 
            { 
                Id = id
                // TODO: Add test data properties
            };

            _mediatorMock.Setup(x => x.Send(It.IsAny<Get{{ Name }}WithRelatedQuery>(), default))
                .ReturnsAsync(expectedDto);

            // Act
            var result = await _service.GetWithRelatedAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().Be(expectedDto);
            result.ErrorMessage.Should().BeNull();

            _mediatorMock.Verify(x => x.Send(It.Is<Get{{ Name }}WithRelatedQuery>(q => q.Id == id), default), Times.Once);
        }

        [TestMethod]
        public async Task GetWithRelatedAsync_EntityNotFound_ReturnsFailureResult()
        {
            // Arrange
            var id = 999;

            _mediatorMock.Setup(x => x.Send(It.IsAny<Get{{ Name }}WithRelatedQuery>(), default))
                .ReturnsAsync(({{ Name }}WithRelatedDto?)null);

            // Act
            var result = await _service.GetWithRelatedAsync(id);

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeFalse();
            result.Data.Should().BeNull();
            result.ErrorMessage.Should().Contain("{{ Name }} with ID 999 not found");
        }

        #endregion

        #region GetAllAsync Tests

        [TestMethod]
        public async Task GetAllAsync_Always_ReturnsSuccessResult()
        {
            // Arrange
            // Note: GetAllAsync is currently a placeholder implementation

            // Act
            var result = await _service.GetAllAsync();

            // Assert
            result.Should().NotBeNull();
            result.IsSuccess.Should().BeTrue();
            result.Data.Should().NotBeNull();
            result.Data.Should().BeEmpty(); // Current implementation returns empty list
            result.ErrorMessage.Should().BeNull();
        }

        #endregion
    }
}