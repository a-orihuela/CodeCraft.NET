// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
// </auto-generated>

namespace CodeCraft.NET.MAUI.Services
{
    public interface IDialogService
    {
        Task ShowErrorAsync(string title, string message);
        Task ShowInfoAsync(string title, string message);
        Task<bool> ShowConfirmAsync(string title, string message);
        Task<string?> ShowPromptAsync(string title, string message, string placeholder = "");
    }

    public interface INavigationService
    {
        Task NavigateToAsync(string route, object? parameter = null);
        Task GoBackAsync();
        Task PopToRootAsync();
    }

    public class DialogService : IDialogService
    {
        public async Task ShowErrorAsync(string title, string message)
        {
            if (Application.Current?.MainPage != null)
            {
                await Application.Current.MainPage.DisplayAlert(title, message, "OK");
            }
        }

        public async Task ShowInfoAsync(string title, string message)
        {
            if (Application.Current?.MainPage != null)
            {
                await Application.Current.MainPage.DisplayAlert(title, message, "OK");
            }
        }

        public async Task<bool> ShowConfirmAsync(string title, string message)
        {
            if (Application.Current?.MainPage != null)
            {
                return await Application.Current.MainPage.DisplayAlert(title, message, "Yes", "No");
            }
            return false;
        }

        public async Task<string?> ShowPromptAsync(string title, string message, string placeholder = "")
        {
            if (Application.Current?.MainPage != null)
            {
                return await Application.Current.MainPage.DisplayPromptAsync(title, message, placeholder: placeholder);
            }
            return null;
        }
    }

    public class NavigationService : INavigationService
    {
        public async Task NavigateToAsync(string route, object? parameter = null)
        {
            var navigationParameter = parameter != null 
                ? new Dictionary<string, object> { { "Parameter", parameter } }
                : null;
                
            await Shell.Current.GoToAsync(route, navigationParameter);
        }

        public async Task GoBackAsync()
        {
            await Shell.Current.GoToAsync("..");
        }

        public async Task PopToRootAsync()
        {
            await Shell.Current.GoToAsync("//");
        }
    }
}