// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
//     For customizations, use {{ Name }}DetailViewModel.Custom.cs
// </auto-generated>

using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using {{ DesktopProjectName }}.Services;
using {{ ApplicationProjectName }}.DTOs;
using {{ DomainProjectName }}.Model;

namespace {{ MauiProjectName }}.ViewModels.{{ NamePlural }}
{
    [QueryProperty(nameof({{ Name }}Id), "{{ Name }}Id")]
    public partial class {{ Name }}DetailViewModel : ObservableObject
    {
        private readonly {{ Name }}Service _{{ name }}Service;
        private readonly IDialogService _dialogService;
        private readonly INavigationService _navigationService;

        [ObservableProperty]
        private int {{ name }}Id;

        [ObservableProperty]
        private {{ Name }}WithRelatedDto? {{ name }};

        [ObservableProperty]
        private bool isLoading;

        [ObservableProperty]
        private bool isDeleting;

        [ObservableProperty]
        private string title = "{{ Name }} Details";

        public {{ Name }}DetailViewModel(
            {{ Name }}Service {{ name }}Service,
            IDialogService dialogService,
            INavigationService navigationService)
        {
            _{{ name }}Service = {{ name }}Service;
            _dialogService = dialogService;
            _navigationService = navigationService;
        }

        [RelayCommand]
        public async Task LoadAsync()
        {
            if ({{ name }}Id <= 0) return;

            IsLoading = true;
            try
            {
                {{ name }} = await _{{ name }}Service.GetWithRelatedAsync({{ name }}Id);
                if ({{ name }} != null)
                {
                    {{~ for property in Properties ~}}
                    {{~ if property.Name != "Id" && !property.IsNavigation && property.Type == "string" ~}}
                    Title = $"{{ Name }} - {{{ name }}.{{ property.Name }}}";
                    {{~ break ~}}
                    {{~ end ~}}
                    {{~ end ~}}
                }
                else
                {
                    await _dialogService.ShowErrorAsync("Error", "{{ Name }} not found");
                    await _navigationService.GoBackAsync();
                }
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to load {{ name }}: {ex.Message}");
                await _navigationService.GoBackAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        public async Task RefreshAsync()
        {
            await LoadAsync();
        }

        [RelayCommand]
        public async Task EditAsync()
        {
            if ({{ name }} == null) return;
            
            await _navigationService.NavigateToAsync($"{{ Name }}EditPage", {{ name }}.Id);
        }

        [RelayCommand]
        public async Task DeleteAsync()
        {
            if ({{ name }} == null || IsDeleting) return;

            var confirmed = await _dialogService.ShowConfirmAsync(
                "Confirm Delete", 
                $"Are you sure you want to delete this {{ name }}?{Environment.NewLine}This action cannot be undone.");
                
            if (!confirmed) return;

            IsDeleting = true;
            try
            {
                await _{{ name }}Service.DeleteAsync({{ name }}.Id);
                await _dialogService.ShowInfoAsync("Success", "{{ Name }} deleted successfully");
                await _navigationService.GoBackAsync();
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to delete {{ name }}: {ex.Message}");
            }
            finally
            {
                IsDeleting = false;
            }
        }

        [RelayCommand]
        public async Task ShareAsync()
        {
            if ({{ name }} == null) return;

            try
            {
                var shareText = CreateShareText();
                // Implement sharing logic here
                // await Share.RequestAsync(new ShareTextRequest { Text = shareText, Title = "Share {{ Name }}" });
                
                await _dialogService.ShowInfoAsync("Share", shareText);
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to share: {ex.Message}");
            }
        }

        [RelayCommand]
        public async Task GoBackAsync()
        {
            await _navigationService.GoBackAsync();
        }

        [RelayCommand]
        public async Task GoToListAsync()
        {
            await _navigationService.NavigateToAsync($"{{ Name }}ListPage");
        }

        private string CreateShareText()
        {
            if ({{ name }} == null) return string.Empty;

            var text = $"{{ Name }} Details:{Environment.NewLine}";
            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            text += $"{{ property.Name }}: {{{ name }}.{{ property.Name }}}{Environment.NewLine}";
            {{~ end ~}}
            {{~ end ~}}
            
            return text;
        }

        partial void On{{ Name }}IdChanged(int value)
        {
            if (value > 0)
            {
                _ = LoadAsync();
            }
        }

        // Property accessors for easy binding
        {{~ for property in Properties ~}}
        {{~ if property.Name != "Id" && !property.IsNavigation ~}}
        public {{ property.Type | string.downcase }} {{ property.Name }} => {{ name }}?.{{ property.Name }} ?? {{~ if property.Type == "string" ~}}string.Empty{{~ else if property.Type == "int" || property.Type == "decimal" || property.Type == "double" || property.Type == "float" ~}}0{{~ else if property.Type == "bool" ~}}false{{~ else if property.Type == "DateTime" ~}}DateTime.MinValue{{~ else ~}}default{{~ end ~}};
        {{~ end ~}}
        {{~ end ~}}

        public bool CanEdit => {{ name }} != null && !IsLoading && !IsDeleting;
        public bool CanDelete => {{ name }} != null && !IsLoading && !IsDeleting;
        public bool CanShare => {{ name }} != null && !IsLoading;
    }
}