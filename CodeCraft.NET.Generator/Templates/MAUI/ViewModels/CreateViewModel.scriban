// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
//     For customizations, use {{ Name }}CreateViewModel.Custom.cs
// </auto-generated>

using System.Collections.Generic;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CodeCraft.NET.MAUI.Interfaces;
using {{ DesktopProjectName }}.Services;
using {{ ApplicationProjectName }}.DTOs.{{ Name }};
using {{ DomainProjectName }}.Model;
using {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Commands.Create;

namespace {{ MauiProjectName }}.ViewModels.{{ NamePlural }}
{
    public partial class {{ Name }}CreateViewModel : ObservableObject
    {
        private readonly {{ Name }}Service _{{ name }}Service;
        private readonly IDialogService _dialogService;
        private readonly INavigationService _navigationService;

        {{~ for property in Properties ~}}
        {{~ if property.Name != "Id" && !property.IsNavigation ~}}
        [ObservableProperty]
        private {{ property.Type }} {{ property.Name | string.downcase }}{{~ if property.Type == "string" ~}} = string.Empty{{~ end ~}};
        {{~ end ~}}
        {{~ end ~}}

        [ObservableProperty]
        private bool isSaving;

        [ObservableProperty]
        private bool hasValidationErrors;

        [ObservableProperty]
        private string validationSummary = string.Empty;

        public {{ Name }}CreateViewModel(
            {{ Name }}Service {{ name }}Service,
            IDialogService dialogService,
            INavigationService navigationService)
        {
            _{{ name }}Service = {{ name }}Service;
            _dialogService = dialogService;
            _navigationService = navigationService;
        }

        [RelayCommand]
        public async Task SaveAsync()
        {
            if (IsSaving) return;

            if (!ValidateInput())
            {
                await _dialogService.ShowErrorAsync("Validation Error", ValidationSummary);
                return;
            }

            IsSaving = true;
            try
            {
                var command = new {{ Name }}Create
                {
                    {{~ for property in Properties ~}}
                    {{~ if property.Name != "Id" && !property.IsNavigation ~}}
                    {{ property.Name }} = {{ property.Name | string.downcase }},
                    {{~ end ~}}
                    {{~ end ~}}
                };

                var newId = await _{{ name }}Service.CreateAsync(command);
                
                await _dialogService.ShowInfoAsync("Success", "{{ Name }} created successfully");
                await _navigationService.GoBackAsync();
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to create {{ name }}: {ex.Message}");
            }
            finally
            {
                IsSaving = false;
            }
        }

        [RelayCommand]
        public async Task CancelAsync()
        {
            bool hasChanges = CheckForUnsavedChanges();
            
            if (hasChanges)
            {
                var confirmed = await _dialogService.ShowConfirmAsync(
                    "Unsaved Changes", 
                    "You have unsaved changes. Are you sure you want to cancel?");
                    
                if (!confirmed) return;
            }

            await _navigationService.GoBackAsync();
        }

        [RelayCommand]
        public void ClearForm()
        {
            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            {{ property.Name | string.downcase }} = {{~ if property.Type == "string" ~}}string.Empty{{~ else if property.Type == "int" || property.Type == "decimal" || property.Type == "double" || property.Type == "float" ~}}0{{~ else if property.Type == "bool" ~}}false{{~ else if property.Type == "DateTime" ~}}DateTime.Now{{~ else ~}}default{{~ end ~}};
            {{~ end ~}}
            {{~ end ~}}
            
            HasValidationErrors = false;
            ValidationSummary = string.Empty;
        }

        private bool ValidateInput()
        {
            var errors = new List<string>();

            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            {{~ if property.Type == "string" ~}}
            if (string.IsNullOrWhiteSpace({{ property.Name | string.downcase }}))
                errors.Add("{{ property.Name }} is required");
            {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}

            // Add custom validation here
            PerformCustomValidation(errors);

            HasValidationErrors = errors.Any();
            ValidationSummary = string.Join(Environment.NewLine, errors);
            
            return !HasValidationErrors;
        }

        private bool CheckForUnsavedChanges()
        {
            // Check if any field has been modified from default values
            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            {{~ if property.Type == "string" ~}}
            if (!string.IsNullOrEmpty({{ property.Name | string.downcase }})) return true;
            {{~ else if property.Type == "int" || property.Type == "decimal" || property.Type == "double" || property.Type == "float" ~}}
            if ({{ property.Name | string.downcase }} != 0) return true;
            {{~ else if property.Type == "bool" ~}}
            if ({{ property.Name | string.downcase }}) return true;
            {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
            
            return false;
        }

        partial void PerformCustomValidation(List<string> errors);
    }
}