// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
//     For customizations, use {{ Name }}EditViewModel.Custom.cs
// </auto-generated>

using System.Collections.Generic;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CodeCraft.NET.MAUI.Interfaces;
using {{ DesktopProjectName }}.Services;
using {{ ApplicationProjectName }}.DTOs.{{ NamePlural }};
using {{ ApplicationProjectName }}.DTOs.Custom.{{ NamePlural }};
using {{ DomainProjectName }}.Model;
using {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Commands.Update;

namespace {{ MauiProjectName }}.ViewModels.{{ NamePlural }}
{
    [QueryProperty(nameof({{ Name }}Id), "{{ Name }}Id")]
    public partial class {{ Name }}EditViewModel : ObservableObject
    {
        private readonly {{ Name }}Service _{{ name | string.downcase }}Service;
        private readonly IDialogService _dialogService;
        private readonly INavigationService _navigationService;

        [ObservableProperty]
        private int entityId;

        {{~ for property in Properties ~}}
        {{~ if property.Name != "Id" && !property.IsNavigation ~}}
        [ObservableProperty]
        private {{ property.Type }} {{ property.Name | string.downcase }}{{~ if property.Type == "string" ~}} = string.Empty{{~ end ~}};
        
        [ObservableProperty]
        private {{ property.Type }} original{{ property.Name }}{{~ if property.Type == "string" ~}} = string.Empty{{~ end ~}};
        {{~ end ~}}
        {{~ end ~}}

        [ObservableProperty]
        private bool isLoading;

        [ObservableProperty]
        private bool isSaving;

        [ObservableProperty]
        private bool hasValidationErrors;

        [ObservableProperty]
        private string validationSummary = string.Empty;

        [ObservableProperty]
        private bool hasUnsavedChanges;

        public {{ Name }}EditViewModel(
            {{ Name }}Service {{ name | string.downcase }}Service,
            IDialogService dialogService,
            INavigationService navigationService)
        {
            _{{ name | string.downcase }}Service = {{ name | string.downcase }}Service;
            _dialogService = dialogService;
            _navigationService = navigationService;
        }

        public int {{ Name }}Id
        {
            get => entityId;
            set => SetProperty(ref entityId, value);
        }

        [RelayCommand]
        public async Task LoadAsync()
        {
            if (entityId <= 0) return;

            IsLoading = true;
            try
            {
                var {{ name | string.downcase }} = await _{{ name | string.downcase }}Service.GetByIdAsync(entityId);
                if ({{ name | string.downcase }} != null)
                {
                    LoadFromDto({{ name | string.downcase }});
                    StoreOriginalValues();
                }
                else
                {
                    await _dialogService.ShowErrorAsync("Error", "{{ Name }} not found");
                    await _navigationService.GoBackAsync();
                }
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to load {{ name | string.downcase }}: {ex.Message}");
                await _navigationService.GoBackAsync();
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        public async Task SaveAsync()
        {
            if (IsSaving) return;

            if (!ValidateInput())
            {
                await _dialogService.ShowErrorAsync("Validation Error", ValidationSummary);
                return;
            }

            IsSaving = true;
            try
            {
                var command = new {{ Name }}Update
                {
                    Id = entityId,
                    {{~ for property in Properties ~}}
                    {{~ if property.Name != "Id" && !property.IsNavigation ~}}
                    {{ property.Name }} = {{ property.Name | string.downcase }},
                    {{~ end ~}}
                    {{~ end ~}}
                };

                var success = await _{{ name | string.downcase }}Service.UpdateAsync(command);
                
                if (success)
                {
                    await _dialogService.ShowInfoAsync("Success", "{{ Name }} updated successfully");
                    StoreOriginalValues(); // Update original values
                    CheckForChanges();
                    await _navigationService.GoBackAsync();
                }
                else
                {
                    await _dialogService.ShowErrorAsync("Error", "Failed to update {{ name | string.downcase }}");
                }
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to update {{ name | string.downcase }}: {ex.Message}");
            }
            finally
            {
                IsSaving = false;
            }
        }

        [RelayCommand]
        public async Task CancelAsync()
        {
            if (HasUnsavedChanges)
            {
                var confirmed = await _dialogService.ShowConfirmAsync(
                    "Unsaved Changes", 
                    "You have unsaved changes. Are you sure you want to cancel?");
                    
                if (!confirmed) return;
            }

            await _navigationService.GoBackAsync();
        }

        [RelayCommand]
        public void ResetChanges()
        {
            LoadOriginalValues();
            CheckForChanges();
            HasValidationErrors = false;
            ValidationSummary = string.Empty;
        }

        private void LoadFromDto({{ Name }}Dto dto)
        {
            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            {{ property.Name | string.downcase }} = dto.{{ property.Name }};
            {{~ end ~}}
            {{~ end ~}}
        }

        private void StoreOriginalValues()
        {
            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            Original{{ property.Name }} = {{ property.Name | string.downcase }};
            {{~ end ~}}
            {{~ end ~}}
        }

        private void LoadOriginalValues()
        {
            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            {{ property.Name | string.downcase }} = Original{{ property.Name }};
            {{~ end ~}}
            {{~ end ~}}
        }

        private void CheckForChanges()
        {
            HasUnsavedChanges = 
                {{~ for property in Properties ~}}
                {{~ if property.Name != "Id" && !property.IsNavigation ~}}
                {{~ if for.first ~}}{{ property.Name | string.downcase }} != Original{{ property.Name }}{{~ else ~}} ||
                {{ property.Name | string.downcase }} != Original{{ property.Name }}{{~ end ~}}{{~ if for.last ~}};{{~ end ~}}
                {{~ end ~}}
                {{~ end ~}}
        }

        private bool ValidateInput()
        {
            var errors = new List<string>();

            {{~ for property in Properties ~}}
            {{~ if property.Name != "Id" && !property.IsNavigation ~}}
            {{~ if property.Type == "string" ~}}
            if (string.IsNullOrWhiteSpace({{ property.Name | string.downcase }}))
                errors.Add("{{ property.Name }} is required");
            {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}

            // Add custom validation here
            PerformCustomValidation(errors);

            HasValidationErrors = errors.Any();
            ValidationSummary = string.Join(Environment.NewLine, errors);
            
            return !HasValidationErrors;
        }

        partial void PerformCustomValidation(List<string> errors);

        partial void OnEntityIdChanged(int value)
        {
            if (value > 0)
            {
                _ = LoadAsync();
            }
        }
    }
}