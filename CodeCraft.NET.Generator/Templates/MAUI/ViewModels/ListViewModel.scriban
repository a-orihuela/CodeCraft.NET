// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
//     For customizations, use {{ Name }}ListView.Custom.cs
// </auto-generated>

using System.Collections.ObjectModel;
using System.Collections.Generic;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CodeCraft.NET.MAUI.Interfaces;
using {{ DesktopProjectName }}.Services;
using {{ ApplicationProjectName }}.DTOs.{{ NamePlural }};
using {{ DomainProjectName }}.Model;
using {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Commands.Create;
using {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Commands.Update;
using {{ ApplicationProjectName }}.CQRS.Features.{{ NamePlural }}.Commands.Delete;

namespace {{ MauiProjectName }}.ViewModels.{{ NamePlural }}
{
    public partial class {{ Name }}ListViewModel : ObservableObject
    {
        private readonly {{ Name }}Service _{{ name | string.downcase }}Service;
        private readonly IDialogService _dialogService;
        private readonly INavigationService _navigationService;

        [ObservableProperty]
        private ObservableCollection<{{ Name }}Dto> {{ name | string.downcase }}s = new();

        [ObservableProperty]
        private bool isLoading;

        [ObservableProperty]
        private {{ Name }}Dto? selected{{ Name }};

        [ObservableProperty]
        private string searchText = string.Empty;

        [ObservableProperty]
        private bool isRefreshing;

        public {{ Name }}ListViewModel(
            {{ Name }}Service {{ name | string.downcase }}Service,
            IDialogService dialogService,
            INavigationService navigationService)
        {
            _{{ name | string.downcase }}Service = {{ name | string.downcase }}Service;
            _dialogService = dialogService;
            _navigationService = navigationService;
        }

        [RelayCommand]
        public async Task LoadAsync()
        {
            if (IsLoading) return;

            IsLoading = true;
            try
            {
                // TODO: Implement search functionality
                // var items = await _{{ name | string.downcase }}Service.SearchAsync(SearchText);
                
                // For now, get all items
                var items = new List<{{ Name }}Dto>(); // await _{{ name | string.downcase }}Service.GetAllAsync();
                {{ name | string.downcase }}s = new ObservableCollection<{{ Name }}Dto>(items);
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to load {{ name | string.downcase }}s: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        public async Task RefreshAsync()
        {
            if (IsRefreshing) return;

            IsRefreshing = true;
            try
            {
                await LoadAsync();
            }
            finally
            {
                IsRefreshing = false;
            }
        }

        [RelayCommand]
        public async Task Create{{ Name }}Async()
        {
            await _navigationService.NavigateToAsync($"{{ Name }}CreatePage");
        }

        [RelayCommand]
        public async Task Edit{{ Name }}Async({{ Name }}Dto {{ name | string.downcase }})
        {
            if ({{ name | string.downcase }} == null) return;
            
            await _navigationService.NavigateToAsync($"{{ Name }}EditPage", {{ name | string.downcase }}.Id);
        }

        [RelayCommand]
        public async Task View{{ Name }}Async({{ Name }}Dto {{ name | string.downcase }})
        {
            if ({{ name | string.downcase }} == null) return;
            
            await _navigationService.NavigateToAsync($"{{ Name }}DetailPage", {{ name | string.downcase }}.Id);
        }

        [RelayCommand]
        public async Task Delete{{ Name }}Async({{ Name }}Dto {{ name | string.downcase }})
        {
            if ({{ name | string.downcase }} == null) return;

            var confirmed = await _dialogService.ShowConfirmAsync(
                "Confirm Delete", 
                $"Are you sure you want to delete this {{ name | string.downcase }}?");
                
            if (!confirmed) return;

            try
            {
                IsLoading = true;
                await _{{ name | string.downcase }}Service.DeleteAsync({{ name | string.downcase }}.Id);
                {{ name | string.downcase }}s.Remove({{ name | string.downcase }});
                await _dialogService.ShowInfoAsync("Success", "{{ Name }} deleted successfully");
            }
            catch (Exception ex)
            {
                await _dialogService.ShowErrorAsync("Error", $"Failed to delete {{ name | string.downcase }}: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        [RelayCommand]
        public async Task SearchAsync()
        {
            await LoadAsync();
        }

        partial void OnSearchTextChanged(string value)
        {
            // Debounce search - implement if needed
        }

        partial void OnSelected{{ Name }}Changed({{ Name }}Dto? value)
        {
            if (value != null)
            {
                // Auto-navigate to detail or handle selection
                _ = View{{ Name }}Async(value);
            }
        }
    }
}