// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using System.Collections.ObjectModel;
using System.ComponentModel;
using CommunityToolkit.Mvvm.ComponentModel;
using Microsoft.Extensions.Logging;
using CodeCraft.NET.Application.DTOs.{{ Name }}s;
using {{ ApplicationProjectName }}.CQRS.Features.{{ Name }}s.Commands.Create;
using {{ ApplicationProjectName }}.CQRS.Features.{{ Name }}s.Commands.Update;
using CodeCraft.NET.DesktopAPI.Services;
using CodeCraft.NET.DesktopAPI.Models;

namespace {{ MauiProjectName }}.Services.Generated
{
    /// <summary>
    /// Service helper for {{ Name }} operations optimized for MAUI UI
    /// Provides loading states, error handling, and UI-friendly methods
    /// </summary>
    public partial class {{ Name }}ServiceHelper
    {
        private readonly {{ Name }}Service _service;
        private readonly ILogger<{{ Name }}ServiceHelper> _logger;

        public {{ Name }}ServiceHelper({{ Name }}Service service, ILogger<{{ Name }}ServiceHelper> logger)
        {
            _service = service;
            _logger = logger;
        }

        /// <summary>
        /// Load all {{ NamePlural }} with UI loading states
        /// </summary>
        public async Task<MauiServiceResult<ObservableCollection<{{ Name }}Dto>>> LoadAllForUIAsync(
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Loading all {{ NamePlural }} for UI");
                
                // Set loading state if ViewModel supports it
                SetLoadingState(viewModel, true);
                
                var result = await _service.GetAllAsync();
                
                if (result.IsSuccess)
                {
                    var collection = new ObservableCollection<{{ Name }}Dto>(result.Value);
                    _logger.LogInformation("Successfully loaded {Count} {{ NamePlural }}", collection.Count);
                    return MauiServiceResult<ObservableCollection<{{ Name }}Dto>>.Success(collection);
                }
                else
                {
                    _logger.LogWarning("Failed to load {{ NamePlural }}: {Error}", result.ErrorMessage);
                    return MauiServiceResult<ObservableCollection<{{ Name }}Dto>>.Failure(
                        result.ErrorMessage, 
                        "Failed to load {{ NamePlural }}. Please check your connection and try again.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while loading {{ NamePlural }} for UI");
                return MauiServiceResult<ObservableCollection<{{ Name }}Dto>>.Failure(
                    ex.Message,
                    "An unexpected error occurred while loading {{ NamePlural }}.");
            }
            finally
            {
                SetLoadingState(viewModel, false);
            }
        }

        /// <summary>
        /// Create {{ Name }} with UI validation and feedback
        /// </summary>
        public async Task<MauiServiceResult<int>> CreateWithUIFeedbackAsync(
            {{ Name }}Create command,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Creating {{ Name }} via UI");
                
                SetSavingState(viewModel, true);
                
                var result = await _service.CreateAsync(command);
                
                if (result.IsSuccess)
                {
                    _logger.LogInformation("Successfully created {{ Name }} with ID: {Id}", result.Value);
                    return MauiServiceResult<int>.Success(
                        result.Value,
                        "{{ Name }} created successfully!");
                }
                else
                {
                    _logger.LogWarning("Failed to create {{ Name }}: {Error}", result.ErrorMessage);
                    return MauiServiceResult<int>.Failure(
                        result.ErrorMessage,
                        "Failed to create {{ Name }}. Please check your input and try again.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while creating {{ Name }} via UI");
                return MauiServiceResult<int>.Failure(
                    ex.Message,
                    "An unexpected error occurred while creating the {{ Name }}.");
            }
            finally
            {
                SetSavingState(viewModel, false);
            }
        }

        /// <summary>
        /// Update {{ Name }} with optimistic UI updates
        /// </summary>
        public async Task<MauiServiceResult<bool>> UpdateWithUIFeedbackAsync(
            {{ Name }}Update command,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Updating {{ Name }} {Id} via UI", command.Id);
                
                SetSavingState(viewModel, true);
                
                var result = await _service.UpdateAsync(command);
                
                if (result.IsSuccess)
                {
                    _logger.LogInformation("Successfully updated {{ Name }} {Id}", command.Id);
                    return MauiServiceResult<bool>.Success(
                        true,
                        "{{ Name }} updated successfully!");
                }
                else
                {
                    _logger.LogWarning("Failed to update {{ Name }} {Id}: {Error}", command.Id, result.ErrorMessage);
                    return MauiServiceResult<bool>.Failure(
                        result.ErrorMessage,
                        "Failed to update {{ Name }}. Please check your input and try again.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while updating {{ Name }} {Id} via UI", command.Id);
                return MauiServiceResult<bool>.Failure(
                    ex.Message,
                    "An unexpected error occurred while updating the {{ Name }}.");
            }
            finally
            {
                SetSavingState(viewModel, false);
            }
        }

        /// <summary>
        /// Delete {{ Name }} with confirmation handling
        /// </summary>
        public async Task<MauiServiceResult<bool>> DeleteWithConfirmationAsync(
            int id,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Deleting {{ Name }} {Id} via UI", id);
                
                SetLoadingState(viewModel, true);
                
                var result = await _service.DeleteAsync(id);
                
                if (result.IsSuccess)
                {
                    _logger.LogInformation("Successfully deleted {{ Name }} {Id}", id);
                    return MauiServiceResult<bool>.Success(
                        true,
                        "{{ Name }} deleted successfully!");
                }
                else
                {
                    _logger.LogWarning("Failed to delete {{ Name }} {Id}: {Error}", id, result.ErrorMessage);
                    return MauiServiceResult<bool>.Failure(
                        result.ErrorMessage,
                        "Failed to delete {{ Name }}. It may have been already removed.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while deleting {{ Name }} {Id} via UI", id);
                return MauiServiceResult<bool>.Failure(
                    ex.Message,
                    "An unexpected error occurred while deleting the {{ Name }}.");
            }
            finally
            {
                SetLoadingState(viewModel, false);
            }
        }

        /// <summary>
        /// Get {{ Name }} by ID with UI error handling
        /// </summary>
        public async Task<MauiServiceResult<{{ Name }}Dto>> GetByIdForUIAsync(
            int id,
            INotifyPropertyChanged viewModel = null)
        {
            try
            {
                _logger.LogInformation("Loading {{ Name }} {Id} for UI", id);
                
                SetLoadingState(viewModel, true);
                
                var result = await _service.GetByIdAsync(id);
                
                if (result.IsSuccess && result.Value != null)
                {
                    _logger.LogInformation("Successfully loaded {{ Name }} {Id}", id);
                    return MauiServiceResult<{{ Name }}Dto>.Success(result.Value);
                }
                else
                {
                    _logger.LogWarning("{{ Name }} {Id} not found", id);
                    return MauiServiceResult<{{ Name }}Dto>.Failure(
                        "Entity not found",
                        "The requested {{ Name }} could not be found.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception while loading {{ Name }} {Id} for UI", id);
                return MauiServiceResult<{{ Name }}Dto>.Failure(
                    ex.Message,
                    "An unexpected error occurred while loading the {{ Name }}.");
            }
            finally
            {
                SetLoadingState(viewModel, false);
            }
        }

        #region Private Helper Methods

        private void SetLoadingState(INotifyPropertyChanged viewModel, bool isLoading)
        {
            if (viewModel is ObservableObject observable)
            {
                // Try to set IsLoading property if it exists
                var isLoadingProperty = observable.GetType().GetProperty("IsLoading");
                isLoadingProperty?.SetValue(observable, isLoading);
            }
        }

        private void SetSavingState(INotifyPropertyChanged viewModel, bool isSaving)
        {
            if (viewModel is ObservableObject observable)
            {
                // Try to set IsSaving property if it exists
                var isSavingProperty = observable.GetType().GetProperty("IsSaving");
                isSavingProperty?.SetValue(observable, isSaving);
            }
        }

        #endregion
    }
}