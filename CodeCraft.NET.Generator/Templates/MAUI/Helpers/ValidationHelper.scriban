// <auto-generated>
//     This code was generated by CodeCraft.NET Generator.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using System.ComponentModel.DataAnnotations;
using {{ ApplicationProjectName }}.DTOs.{{ Name }}s;
using CodeCraft.NET.MAUI.Validation.Generated;

namespace {{ MauiProjectName }}.Validation.Generated
{
    /// <summary>
    /// Validation helper for {{ Name }} entity
    /// Provides UI-friendly validation with localized messages
    /// </summary>
    public static class {{ Name }}ValidationHelper
    {
        /// <summary>
        /// Validate {{ Name }} for creation
        /// </summary>
        public static ValidationResult ValidateForCreate(object model)
        {
            var validationResults = new List<ValidationResult>();
            var context = new ValidationContext(model);
            
            var isValid = Validator.TryValidateObject(model, context, validationResults, true);
            
            return new ValidationResult
            {
                IsValid = isValid,
                ErrorMessages = validationResults.Select(vr => vr.ErrorMessage ?? "Unknown error").ToList()
            };
        }

        /// <summary>
        /// Validate {{ Name }} for update
        /// </summary>
        public static ValidationResult ValidateForUpdate(object model)
        {
            var validationResults = new List<ValidationResult>();
            var context = new ValidationContext(model);
            
            var isValid = Validator.TryValidateObject(model, context, validationResults, true);
            
            return new ValidationResult
            {
                IsValid = isValid,
                ErrorMessages = validationResults.Select(vr => vr.ErrorMessage ?? "Unknown error").ToList()
            };
        }

        /// <summary>
        /// Validate specific property
        /// </summary>
        public static ValidationResult ValidateProperty(object model, string propertyName, object value)
        {
            var validationResults = new List<ValidationResult>();
            var context = new ValidationContext(model) { MemberName = propertyName };
            
            var isValid = Validator.TryValidateProperty(value, context, validationResults);
            
            return new ValidationResult
            {
                IsValid = isValid,
                ErrorMessages = validationResults.Select(vr => vr.ErrorMessage ?? "Unknown error").ToList()
            };
        }

        /// <summary>
        /// Get user-friendly field name for display
        /// </summary>
        public static string GetDisplayName(string propertyName)
        {
            return propertyName switch
            {
{{~ for property in Properties ~}}
                "{{ property.Name }}" => "{{ property.DisplayName ?? property.Name }}",
{{~ end ~}}
                _ => propertyName
            };
        }

        /// <summary>
        /// Get validation hints for UI
        /// </summary>
        public static string GetValidationHint(string propertyName)
        {
            return propertyName switch
            {
{{~ for property in Properties ~}}
    {{~ if property.Type == "string" ~}}
                "{{ property.Name }}" => "Enter {{ property.DisplayName ?? property.Name | string.downcase }}",
    {{~ else if property.Type == "decimal" || property.Type == "int" ~}}
                "{{ property.Name }}" => "Enter a valid {{ property.DisplayName || property.Name | string.downcase }} number",
    {{~ else if property.Type == "DateTime" ~}}
                "{{ property.Name }}" => "Select {{ property.DisplayName || property.Name | string.downcase }}",
    {{~ else if property.Type == "bool" ~}}
                "{{ property.Name }}" => "Check if {{ property.DisplayName || property.Name | string.downcase }} applies",
    {{~ else ~}}
                "{{ property.Name }}" => "Enter {{ property.DisplayName || property.Name | string.downcase }}",
    {{~ end ~}}
{{~ end ~}}
                _ => $"Enter {propertyName.ToLowerInvariant()}"
            };
        }

        /// <summary>
        /// Check if field is required
        /// </summary>
        public static bool IsRequired(string propertyName)
        {
            return propertyName switch
            {
{{~ for property in Properties ~}}
    {{~ if property.IsRequired ~}}
                "{{ property.Name }}" => true,
    {{~ end ~}}
{{~ end ~}}
                _ => false
            };
        }

        /// <summary>
        /// Get maximum length for string fields
        /// </summary>
        public static int? GetMaxLength(string propertyName)
        {
            return propertyName switch
            {
{{~ for property in Properties ~}}
    {{~ if property.Type == "string" && property.MaxLength ~}}
                "{{ property.Name }}" => {{ property.MaxLength }},
    {{~ end ~}}
{{~ end ~}}
                _ => null
            };
        }

        /// <summary>
        /// Validate business rules specific to {{ Name }}
        /// </summary>
        public static ValidationResult ValidateBusinessRules({{ Name }}Dto model)
        {
            var errors = new List<string>();

            // Add business rule validations specific to {{ Name }}
            {{~ if Name == "FoodItem" ~}}
            // Food item specific validations
            if (model.KcalPer100 < 0)
                errors.Add("Calories per 100g cannot be negative");
            
            if (model.CarbsPer100 < 0)
                errors.Add("Carbs per 100g cannot be negative");
                
            if (model.ProteinPer100 < 0)
                errors.Add("Protein per 100g cannot be negative");
                
            if (model.FatPer100 < 0)
                errors.Add("Fat per 100g cannot be negative");

            var totalMacros = model.CarbsPer100 + model.ProteinPer100 + model.FatPer100;
            if (totalMacros > 100)
                errors.Add("Total macros cannot exceed 100g per 100g");
            {{~ end ~}}

            return new ValidationResult
            {
                IsValid = errors.Count == 0,
                ErrorMessages = errors
            };
        }
    }
}