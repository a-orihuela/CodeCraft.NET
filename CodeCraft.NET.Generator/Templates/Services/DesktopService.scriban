// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using MediatR;
using CodeCraft.NET.Application.DTOs.{{ NamePlural }};
using CodeCraft.NET.Application.DTOs.Custom.{{ NamePlural }};
using CodeCraft.NET.Application.CQRS.Features.{{ NamePlural }}.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.{{ NamePlural }}.Commands.Delete;
using CodeCraft.NET.Application.CQRS.Features.{{ NamePlural }}.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.{{ NamePlural }}.Queries.Get{{ Name }}ById;
using CodeCraft.NET.Application.CQRS.Features.{{ NamePlural }}.Queries.Get{{ Name }}WithRelated;

namespace CodeCraft.NET.DesktopAPI.Services
{
    public partial class {{ Name }}Service
    {
        private readonly IMediator _mediator;

        public {{ Name }}Service(IMediator mediator)
        {
            _mediator = mediator;
        }

        public async Task<int> CreateAsync({{ Name }}Create command)
        {
            return await _mediator.Send(command);
        }

        public async Task<bool> UpdateAsync({{ Name }}Update command)
        {
            return await _mediator.Send(command);
        }

        public async Task<bool> DeleteAsync(int id)
        {
            return await _mediator.Send(new {{ Name }}Delete { Id = id });
        }

        public async Task<{{ Name }}Dto?> GetByIdAsync(int id)
        {
            return await _mediator.Send(new Get{{ Name }}ByIdQuery { Id = id });
        }

        public async Task<{{ Name }}WithRelatedDto?> GetWithRelatedAsync(int id)
        {
            return await _mediator.Send(new Get{{ Name }}WithRelatedQuery { Id = id });
        }
    }
}