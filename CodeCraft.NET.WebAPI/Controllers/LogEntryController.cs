// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Update;
using CodeCraft.NET.Services.Services;
using Microsoft.AspNetCore.Mvc;


namespace CodeCraft.NET.WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public partial class LogEntryController : ControllerBase
    {
        private readonly LogEntryService _logentryService;

        public LogEntryController(LogEntryService logentryService)
        {
            _logentryService = logentryService;
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] LogEntryCreate command)
        {
            var result = await _logentryService.CreateAsync(command);
            
            if (result.IsSuccess)
            {
                return Ok(new { id = result.Data });
            }
            
            return BadRequest(new { error = result.ErrorMessage, validationErrors = result.ValidationErrors });
        }

        [HttpPut]
        public async Task<IActionResult> Update([FromBody] LogEntryUpdate command)
        {
            var result = await _logentryService.UpdateAsync(command);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return BadRequest(new { error = result.ErrorMessage, validationErrors = result.ValidationErrors });
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var result = await _logentryService.DeleteAsync(id);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return BadRequest(new { error = result.ErrorMessage });
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var result = await _logentryService.GetByIdAsync(id);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return NotFound(new { error = result.ErrorMessage });
        }

        [HttpGet("{id}/related")]
        public async Task<IActionResult> GetWithRelated(int id)
        {
            var result = await _logentryService.GetWithRelatedAsync(id);
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return NotFound(new { error = result.ErrorMessage });
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var result = await _logentryService.GetAllAsync();
            
            if (result.IsSuccess)
            {
                return Ok(result.Data);
            }
            
            return BadRequest(new { error = result.ErrorMessage });
        }
    }
}