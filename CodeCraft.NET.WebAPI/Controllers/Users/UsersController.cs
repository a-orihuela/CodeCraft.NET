// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using CodeCraft.NET.Application.CQRS.Features.Users.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.Users.Commands.Delete;
using CodeCraft.NET.Application.CQRS.Features.Users.Commands.Update;
using CodeCraft.NET.Application.CQRS.Features.Users.Queries.GetUserById;
using CodeCraft.NET.Application.CQRS.Features.Users.Queries.GetUserWithRelated;

namespace CodeCraft.NET.WebAPI.Controllers.Users
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public partial class UserController : ControllerBase
    {
        private readonly IMediator _mediator;

        public UserController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] UserCreate command)
        {
            var id = await _mediator.Send(command);
            return Ok(new { id });
        }

        [HttpPut]
        public async Task<IActionResult> Update([FromBody] UserUpdate command)
        {
            var result = await _mediator.Send(command);
            return Ok(result);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var result = await _mediator.Send(new UserDelete { Id = id });
            return Ok(result);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var result = await _mediator.Send(new GetUserByIdQuery { Id = id });
            return Ok(result);
        }

        [HttpGet("{id}/related")]
        public async Task<IActionResult> GetWithRelated(int id)
        {
            var result = await _mediator.Send(new GetUserWithRelatedQuery { Id = id });
            return Ok(result);
        }
    }
}
