// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogConfigurations.Commands.Update;
using CodeCraft.NET.Application.DTOs.Custom.LogConfigurations;
using CodeCraft.NET.Application.DTOs.LogConfigurations;
using CodeCraft.NET.Services.Models;
using CodeCraft.NET.Services.Services;


namespace CodeCraft.NET.DesktopAPI.Services
{
    /// <summary>
    /// Desktop API facade for LogConfiguration operations.
    /// Provides direct access to business logic for MAUI/Desktop applications.
    /// </summary>
    public partial class LogConfigurationDesktopService
    {
        private readonly LogConfigurationService _logconfigurationService;

        public LogConfigurationDesktopService(LogConfigurationService logconfigurationService)
        {
            _logconfigurationService = logconfigurationService;
        }

        /// <summary>
        /// Creates a new LogConfiguration entity
        /// </summary>
        /// <param name="command">Create command with entity data</param>
        /// <returns>Result containing the new entity ID or error message</returns>
        public async Task<ServiceResult<int>> CreateAsync(LogConfigurationCreate command)
        {
            return await _logconfigurationService.CreateAsync(command);
        }

        /// <summary>
        /// Updates an existing LogConfiguration entity
        /// </summary>
        /// <param name="command">Update command with entity data</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> UpdateAsync(LogConfigurationUpdate command)
        {
            return await _logconfigurationService.UpdateAsync(command);
        }

        /// <summary>
        /// Deletes a LogConfiguration entity by ID
        /// </summary>
        /// <param name="id">Entity ID to delete</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> DeleteAsync(int id)
        {
            return await _logconfigurationService.DeleteAsync(id);
        }

        /// <summary>
        /// Gets a LogConfiguration entity by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve</param>
        /// <returns>Result containing the entity or error message</returns>
        public async Task<ServiceResult<LogConfigurationDto?>> GetByIdAsync(int id)
        {
            return await _logconfigurationService.GetByIdAsync(id);
        }

        /// <summary>
        /// Gets a LogConfiguration entity with related data by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve with relationships</param>
        /// <returns>Result containing the entity with related data or error message</returns>
        public async Task<ServiceResult<LogConfigurationWithRelatedDto?>> GetWithRelatedAsync(int id)
        {
            return await _logconfigurationService.GetWithRelatedAsync(id);
        }

        /// <summary>
        /// Gets all LogConfigurations entities
        /// </summary>
        /// <returns>Result containing collection of entities or error message</returns>
        public async Task<ServiceResult<IEnumerable<LogConfigurationDto>>> GetAllAsync()
        {
            return await _logconfigurationService.GetAllAsync();
        }
    }
}