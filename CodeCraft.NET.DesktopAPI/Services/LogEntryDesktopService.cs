// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogEntries.Commands.Update;
using CodeCraft.NET.Application.DTOs.Custom.LogEntries;
using CodeCraft.NET.Application.DTOs.LogEntries;
using CodeCraft.NET.Services.Models;
using CodeCraft.NET.Services.Services;


namespace CodeCraft.NET.DesktopAPI.Services
{
    /// <summary>
    /// Desktop API facade for LogEntry operations.
    /// Provides direct access to business logic for MAUI/Desktop applications.
    /// </summary>
    public partial class LogEntryDesktopService
    {
        private readonly LogEntryService _logentryService;

        public LogEntryDesktopService(LogEntryService logentryService)
        {
            _logentryService = logentryService;
        }

        /// <summary>
        /// Creates a new LogEntry entity
        /// </summary>
        /// <param name="command">Create command with entity data</param>
        /// <returns>Result containing the new entity ID or error message</returns>
        public async Task<ServiceResult<int>> CreateAsync(LogEntryCreate command)
        {
            return await _logentryService.CreateAsync(command);
        }

        /// <summary>
        /// Updates an existing LogEntry entity
        /// </summary>
        /// <param name="command">Update command with entity data</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> UpdateAsync(LogEntryUpdate command)
        {
            return await _logentryService.UpdateAsync(command);
        }

        /// <summary>
        /// Deletes a LogEntry entity by ID
        /// </summary>
        /// <param name="id">Entity ID to delete</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> DeleteAsync(int id)
        {
            return await _logentryService.DeleteAsync(id);
        }

        /// <summary>
        /// Gets a LogEntry entity by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve</param>
        /// <returns>Result containing the entity or error message</returns>
        public async Task<ServiceResult<LogEntryDto?>> GetByIdAsync(int id)
        {
            return await _logentryService.GetByIdAsync(id);
        }

        /// <summary>
        /// Gets a LogEntry entity with related data by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve with relationships</param>
        /// <returns>Result containing the entity with related data or error message</returns>
        public async Task<ServiceResult<LogEntryWithRelatedDto?>> GetWithRelatedAsync(int id)
        {
            return await _logentryService.GetWithRelatedAsync(id);
        }

        /// <summary>
        /// Gets all LogEntries entities
        /// </summary>
        /// <returns>Result containing collection of entities or error message</returns>
        public async Task<ServiceResult<IEnumerable<LogEntryDto>>> GetAllAsync()
        {
            return await _logentryService.GetAllAsync();
        }
    }
}