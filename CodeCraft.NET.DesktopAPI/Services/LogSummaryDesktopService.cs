// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application.CQRS.Features.LogSummaries.Commands.Create;
using CodeCraft.NET.Application.CQRS.Features.LogSummaries.Commands.Update;
using CodeCraft.NET.Application.DTOs.Custom.LogSummaries;
using CodeCraft.NET.Application.DTOs.LogSummaries;
using CodeCraft.NET.Services.Models;
using CodeCraft.NET.Services.Services;


namespace CodeCraft.NET.DesktopAPI.Services
{
    /// <summary>
    /// Desktop API facade for LogSummary operations.
    /// Provides direct access to business logic for MAUI/Desktop applications.
    /// </summary>
    public partial class LogSummaryDesktopService
    {
        private readonly LogSummaryService _logsummaryService;

        public LogSummaryDesktopService(LogSummaryService logsummaryService)
        {
            _logsummaryService = logsummaryService;
        }

        /// <summary>
        /// Creates a new LogSummary entity
        /// </summary>
        /// <param name="command">Create command with entity data</param>
        /// <returns>Result containing the new entity ID or error message</returns>
        public async Task<ServiceResult<int>> CreateAsync(LogSummaryCreate command)
        {
            return await _logsummaryService.CreateAsync(command);
        }

        /// <summary>
        /// Updates an existing LogSummary entity
        /// </summary>
        /// <param name="command">Update command with entity data</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> UpdateAsync(LogSummaryUpdate command)
        {
            return await _logsummaryService.UpdateAsync(command);
        }

        /// <summary>
        /// Deletes a LogSummary entity by ID
        /// </summary>
        /// <param name="id">Entity ID to delete</param>
        /// <returns>Result indicating success or failure</returns>
        public async Task<ServiceResult<bool>> DeleteAsync(int id)
        {
            return await _logsummaryService.DeleteAsync(id);
        }

        /// <summary>
        /// Gets a LogSummary entity by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve</param>
        /// <returns>Result containing the entity or error message</returns>
        public async Task<ServiceResult<LogSummaryDto?>> GetByIdAsync(int id)
        {
            return await _logsummaryService.GetByIdAsync(id);
        }

        /// <summary>
        /// Gets a LogSummary entity with related data by ID
        /// </summary>
        /// <param name="id">Entity ID to retrieve with relationships</param>
        /// <returns>Result containing the entity with related data or error message</returns>
        public async Task<ServiceResult<LogSummaryWithRelatedDto?>> GetWithRelatedAsync(int id)
        {
            return await _logsummaryService.GetWithRelatedAsync(id);
        }

        /// <summary>
        /// Gets all LogSummaries entities
        /// </summary>
        /// <returns>Result containing collection of entities or error message</returns>
        public async Task<ServiceResult<IEnumerable<LogSummaryDto>>> GetAllAsync()
        {
            return await _logsummaryService.GetAllAsync();
        }
    }
}