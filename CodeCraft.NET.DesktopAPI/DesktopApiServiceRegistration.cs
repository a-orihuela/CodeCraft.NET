// <auto-generated>
//     This code was generated by CodeCraft.NET.
//     Manual changes to this file may be overwritten.
// </auto-generated>

using CodeCraft.NET.Application;
using CodeCraft.NET.DesktopAPI.Services;
using CodeCraft.NET.Infrastructure;
using CodeCraft.NET.Services;
using MediatR;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace CodeCraft.NET.DesktopAPI
{
    public static partial class DesktopApiServiceRegistration
    {
        /// <summary>
        /// Registers Desktop API services for MAUI/Desktop applications using SQLite
        /// </summary>
        /// <param name="services">Service collection</param>
        /// <param name="configuration">Configuration instance</param>
        /// <param name="connectionString">Database connection string</param>
        /// <returns>Configured service collection</returns>
        public static IServiceCollection AddDesktopApiServices(this IServiceCollection services, IConfiguration configuration, string connectionString)
        {
            // Add Infrastructure services (Database, repositories, etc.) - SQLite only
            services.AddInfrastructureServices(configuration, connectionString);
            
            // Add Application services (CQRS, MediatR, etc.)
            services.AddApplicationServices();
            
            // Add Services layer (business logic)
            services.AddServicesLayer(configuration);
            
            // Register all generated desktop services automatically
            RegisterDesktopServices(services);
            
            // Register advanced orchestration services
            services.AddOrchestrationServices();
            
            return services;
        }

        /// <summary>
        /// Registers Desktop API services for MAUI/Desktop applications using SQLite
        /// </summary>
        /// <param name="services">Service collection</param>
        /// <param name="connectionString">Database connection string</param>
        /// <returns>Configured service collection</returns>
        public static IServiceCollection AddDesktopApiServices(this IServiceCollection services, string connectionString)
        {
            // Add Infrastructure services (Database, repositories, etc.) - SQLite only
            services.AddInfrastructureServices(connectionString);
            
            // Add Application services (CQRS, MediatR, etc.)
            services.AddApplicationServices();
            
            // Add Services layer (business logic)
            services.AddServicesLayer(null!);
            
            // Register all generated desktop services automatically
            RegisterDesktopServices(services);
            
            // Register advanced orchestration services
            services.AddOrchestrationServices();
            
            return services;
        }
        
        /// <summary>
        /// Registers all generated Desktop API services (facades)
        /// </summary>
        private static void RegisterDesktopServices(IServiceCollection services)
        {
            // Generated Desktop API facade services registration
            services.AddScoped<LogConfigurationDesktopService>();
            services.AddScoped<LogEntryDesktopService>();
            services.AddScoped<LogSummaryDesktopService>();
        }
    }
}